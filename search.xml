<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Rust】所有权Ownership</title>
      <link href="/2023/03/20/%E3%80%90Rust%E3%80%91%E6%89%80%E6%9C%89%E6%9D%83Ownership/"/>
      <url>/2023/03/20/%E3%80%90Rust%E3%80%91%E6%89%80%E6%9C%89%E6%9D%83Ownership/</url>
      
        <content type="html"><![CDATA[<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>核心内容：</p><ol><li>Rust 中的每一个值都有一个<strong>所有者</strong>（<em>owner</em>）。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><p>变量有变量名和对应的内存分配空间。Rust中的所有权定义<strong>该变量与变量名和对应的存储空间相绑定</strong>，在作用域结束时拥有所有权的变量的存储空间会被释放，而没有所有权的变量则忽略释放空间的操作。</p><p>Rust编译器会隐式调用Copy函数和Clone函数。Copy即复制一份完全一样的变量，而不会转移将原有变量的所有权，举例如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n1</span>: <span class="type">u32</span> = <span class="number">114514</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n2</span> = n1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;n1 = &#123;&#125; and n2 = &#123;&#125;&quot;</span>, n1, n2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n1 = 114514 and n2 = 114514</span><br></pre></td></tr></table></figure><p>上例的u32类型没有发生所有权转移，而对于String类型的数据，会发生所有权转移的情况。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blockchain is so interesting&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">keikei@LAPTOP-VME6S439:~/rust_study/ownership$ cargo run</span><br><span class="line">   Compiling ownership v0.1.0 (/home/keikei/rust_study/ownership)</span><br><span class="line">error: 2 positional arguments in format string, but no arguments were given</span><br><span class="line">  --&gt; src/main.rs:57:20</span><br><span class="line">   |</span><br><span class="line">57 |     println!(&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;);</span><br><span class="line">   |                    ^^          ^^</span><br><span class="line"></span><br><span class="line">error: could not compile `ownership` (bin &quot;ownership&quot;) due to previous error</span><br><span class="line">keikei@LAPTOP-VME6S439:~/rust_study/ownership$ cargo run</span><br><span class="line">   Compiling ownership v0.1.0 (/home/keikei/rust_study/ownership)</span><br><span class="line">error[E0382]: borrow of moved value: `s1`</span><br><span class="line">  --&gt; src/main.rs:57:37</span><br><span class="line">   |</span><br><span class="line">55 |     let s1 = String::from(&quot;Blockchain is so interesting&quot;);</span><br><span class="line">   |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait</span><br><span class="line">56 |     let s2 = s1;</span><br><span class="line">   |              -- value moved here</span><br><span class="line">57 |     println!(&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;, s1, s2);</span><br><span class="line">   |                                     ^^ value borrowed here after move</span><br><span class="line">   |</span><br><span class="line">   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)</span><br><span class="line">help: consider cloning the value if the performance cost is acceptable</span><br><span class="line">   |</span><br><span class="line">56 |     let s2 = s1.clone();</span><br><span class="line">   |                ++++++++</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0382`.</span><br><span class="line">error: could not compile `ownership` (bin &quot;ownership&quot;) due to previous error</span><br></pre></td></tr></table></figure><p>如果把<code>let s2 = s1;</code>改为<code>let s2 = s1.clone();</code>，编译能够通过。说明我们在对复杂数据类型进行操作时需要显式的调用<code>clone</code>函数。</p><p>官方文档的说法：</p><p>任何一组简单标量值的组合都可以实现 <code>Copy</code>，任何不需要分配内存或某种形式资源的类型都可以实现 <code>Copy</code> 。如下是一些 <code>Copy</code> 的类型：</p><ul><li>所有整数类型，比如 <code>u32</code>。</li><li>布尔类型，<code>bool</code>，它的值是 <code>true</code> 和 <code>false</code>。</li><li>所有浮点数类型，比如 <code>f64</code>。</li><li>字符类型，<code>char</code>。</li><li>元组，当且仅当其包含的类型也都实现 <code>Copy</code> 的时候。比如，<code>(i32, i32)</code> 实现了 <code>Copy</code>，但 <code>(i32, String)</code> 就没有。</li></ul><h2 id="引用和借用"><a href="#引用和借用" class="headerlink" title="引用和借用"></a>引用和借用</h2><p>&amp;的出现能允许你使用值但不获取所有权，多在函数传参时使用。如果这个参数的值需要改变，那还必须指定&amp;mut，说明该参数是原变量的可变引用。同理，可变引用不具有所有权。</p><p>可变引用只能引用一次，因为可变引用归根结底是指向同一份内存空间。假设存在两个可变引用<code>&amp;mut a</code>和<code>&amp;mut b</code>都指向1这个值，如果a被修改为2了，那b的值到底是1还是2呢？所以Rust会拒绝这样的操作以防止数据竞争。</p><p>Rust只允许有一个可变引用或者多个不可变引用，可变引用和不可变引用不能同时存在。</p><p>一个引用的作用域从声明的地方开始一直持续到最后一次使用为止。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r2</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line">    <span class="comment">// 此位置之后 r1 和 r2 不再使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello and hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="Slice类型"><a href="#Slice类型" class="headerlink" title="Slice类型"></a>Slice类型</h2><p>Rust Slice（切片）是对数据值的部分引用，比如<code>&amp;s[0..i]</code>可以指定引用起始索引为0，长度为i的字符串</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn first_word(s: &amp;String) -&gt; usize</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_word</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;s[..];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】Chainlink相关</title>
      <link href="/2023/03/19/%E3%80%90Chainlink%E3%80%91Chainlink%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/03/19/%E3%80%90Chainlink%E3%80%91Chainlink%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="白皮书速览"><a href="#白皮书速览" class="headerlink" title="白皮书速览"></a>白皮书速览</h2><p>Chainlink白皮书地址：<a href="https://research.chain.link/whitepaper-v2.pdf?_ga=2.203170515.376502038.1679147678-150248235.1677582268">whitepaper-v2.pdf (chain.link)</a></p><p>摘自<a href="https://zhuanlan.zhihu.com/p/415515492">一文速览Chainlink 2.0白皮书 - 知乎 (zhihu.com)</a></p><p>Chainlink 2.0是在原版白皮书的基础上做的进一步扩展，<u>其愿景是为智能合约快速可靠地接入任何链下数据源和链下计算资源，并同时保障隐私，补充并增强已有和新增区块链的性能。</u>（<em><strong>为区块链接入链下数据，是链上和链下的桥梁</strong></em>）从愿景中不难发现，Chainlink服务的是现存及潜在所有区块链的智能合约，不仅为他们提供链下数据，还提供链下计算，完全满足智能合约的任意链下需求。</p><p>为实现这一愿景，Chainlink 2.0提出去中心化预言机网络（DON）的概念，DON 是由一组Chainlink 节点负责维护的网络，节点基于委员会的共识协议，可灵活选择并部署任何预言机功能。<u>DON的提出将原本功能性的预言机拓宽为预言机集群，实现预言机拓扑结构由点状到网状的演进。</u>（<em><strong>Chainlink本身是一种特殊的分布式节点集群，一定程度上避免了传统预言机存在被单点攻击的风险</strong></em>）DON 的最大优势是可以快速启动新的区块链服务，无需为每个区块链或者每种服务开发新的专用网络。这样一来，无论新的应用场景如何变化，DON都能迅速响应，及时接入。</p><p>DON由可执行程序和适配器组成，其中可执行程序是确定性的程序，而适配器是DON与外界交互的接口。可执行程序类似智能合约，可执行特定计算，如生成随机数，触发链上合约自动执行等。适配器类似接口转换器，使得DON可以与区块链、Web服务器、存储服务器以及其他DON连接。</p><p>Chainlink 2.0白皮书中还列举DON的5个实际用例，分别是：储备金证明，<u>接入企业&#x2F;传统系统</u>，去中心化身份，优先通道及保障DeFi隐私的Mixicles。</p><p>储备金证明常用于不同区块链之间的消息验证，如用户在比特币链锁仓BTC后在以太坊上发行WBTC，这时候以太坊应用就需要验证比特币链上确实锁仓足额BTC。使用储备金证明，DON可以获取比特币链上的储备信息，并反馈给以太坊应用，确保WBTC的发行背书。<u>由于DON的连接特性，企业无需进行额外开发就能将传统系统数据发送至区块链，大大方便接入企业的传统系统</u>。去中心化身份是指通过区块链建立用户的身份信息，信息可以来自传统系统如银行系统等的信用数据，通过DON将这类隐私数据提供给智能合约使用，能够实现低抵押借贷、KYC等区块链应用。优先通道是矿工为用户提供的一种保证，保证用户的交易将在某个区块存储到链上，可以用DON轻松实现。Mixicles是由Chainlink Labs提出的隐私保护DeFi工具，可保证在不披露底层资产信息的前提下进行二元期权交易。</p><p>Chainlink 2.0白皮书单独介绍DON的公允排序服务（FSS）。公允排序包括两方面：一是排序按照节点接收交易的时间先后进行；二是保存交易之间的因果关系。所谓因果关系，是指隐藏交易数据，等到共识层完成排序后再披露交易顺序，以达到防止改变交易之间的因果关系。由此可知，公允排序服务可以有效消除抢跑交易。</p><p>Chainlink 2.0白皮书提到DON采用的交易执行框架（TEF）。TEF具有<u>高性能、低费用、隐私保护等优点</u>，支持任意L2执行技术和范式，可以快速更新主网智能合约，同时保留主网的关键可信度。</p><p>去中心化也是Chainlink 2.0白皮书重点关注的内容，并根据数据经由数据源到DON再到主网智能合约的流向逐一讨论去中心化方案。针对数据源，设计数据源认证机制，保证数据确实由可信数据源未经篡改提供；针对DON，设计成熟客户端，防止客户端出现故障，支持少数派报告；针对主网智能合约，建立监控和失效安全机制，实行信任最小化治理，为DON节点建立链上身份等。</p><p>建立去中心化信任模型的一个关键措施是设计合理的经济激励机制，Chainlink 2.0白皮书分别<u>采用显性和隐性经济激励机制</u>（<em><strong>使作恶成本远高于作恶收益，实现链上不可信环境的可信治理</strong></em>）。显性经济激励为权益质押，Chainlink节点质押一定数量的LINK通证参与DON。Chainlink的权益质押与区块链上的权益质押有很大不同，一方面权益质押主要用来验证链下数据的真实有效性，而非达成区块链底层共识；另一方面，Chainlink的权益质押主要用于防止节点受贿发送欺诈数据，为此Chainlink提出超线性权益质押，即<u>攻击者需要提供远超节点质押的保证金，才能够有效攻击</u>。而隐性激励指未来收益机会，即只有服务质量高、声誉好的节点才能吸引潜在用户，获得未来收益机会。</p><p>Chainlink 2.0白皮书将使用链下资源的智能合约称之为混合型智能合约，单单在链上运行的智能合约受限于链上资源的有限、昂贵和缓慢等制约仅能提供部分功能，而结合DON的混合型智能合约理论上可以获取链下无限的资源，并将高昂的链上计算成本转移到低廉的链下，因而可以提供完备的功能，同时继承智能合约去中心化、无需许可等优点。混合型智能合约优势之一在于让人清楚地了解该智能合约包含链下组件，并把链下组件作为智能合约的组成部分而不再是分割的两个领域。</p><p>Chainlink 2.0白皮书以DON为基础，混合型智能合约为载体，向我们描绘未来预言机蓝图。欲要了解更多Chainlink 2.0设计、实现细节，敬请关注即将发布的Chainlink 2.0中文版白皮书！</p><h3 id="Chainlink的设计机制"><a href="#Chainlink的设计机制" class="headerlink" title="Chainlink的设计机制"></a>Chainlink的设计机制</h3><p>Chainlink 的理想是做一个去中心化的预言机。</p><p>根据白皮书的介绍，Chainlink 通过使用 API 将链上和链外联系起来。它通过获取链上资源（如以太坊、比特币和 Hyperledger 等区块链），并通过 API 将其连接到链下资源（如市场数据、银行支付、零售支付、后端系统、事件数据等）来实现链下数据与链上智能合约的交互。</p><p><img src="https://pic1.zhimg.com/80/v2-8295c870b7319a6e56044d07e9b0dd94_1440w.webp" alt="img"></p><p><a href="https://zhuanlan.zhihu.com/p/113875183">Chainlink的理想与现实 - 知乎 (zhihu.com)</a></p><p>每个参与智能合约的预言机都会搜集相关数据（如市场数据），将数据发送至网络中的其他预言机，按照指示将所有数据聚合至单一数据点，并经由统一的预言机一次性发送至链上的智能合约。</p><p>链下预言机治理其实也存在一个不可能三角问题，如何在确保链下数据客观、严谨的基础上，又能保证和链上世界接轨的处理效率，最主要的是，链下预言机的“管理者‘本身是安全、可信的。总之，链上区块链运转模型和链下预言机治理就像一个双星系统，二者互相影响又互相依赖。</p><p><a href="https://blog.csdn.net/llslinliansheng/article/details/128057631">(56条消息) Chainlink——白皮书简析(whitepaper v2)_llsforest_llsForest的博客-CSDN博客</a></p><p><img src="/../page_imgs/attack.png" alt="img"></p><p>数据是如何实现上链的：<a href="https://blog.csdn.net/heyuekeji/article/details/107023324">(56条消息) 深入浅出：一条数据是如何完成上链的_荷月科技的博客-CSDN博客</a></p><p>对哈希进行签名还可将发送者的身份和信息绑定，同时也可防止其他人冒充发送者，因此这样处理可保证信息的防篡改的同时认证发送者的身份，防止抵赖。</p><p><u>前不久，北京市金融工作局局长霍学文在一次演讲中曾指出，区块链中的“decentralized”特征的本意不是所谓的“去中心化”，准确地讲是“分散”的意思，把区块链简单地理解为“去中心化”，其实是翻译错误，是不准确的。</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】基于私链运行一个Chainlink预言机节点</title>
      <link href="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/"/>
      <url>/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>官方文档：<a href="https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node">Running a Chainlink Node | Chainlink Documentation</a></p><ol><li>本教程和官方教程的区别在于，本教程<strong>基于自己搭建的Geth私有链</strong>而非Goerli测试网</li><li>建议先在本地创建账户，再创建json文件，然后去metamask添加import account，最后再在启动私链的命令中添加–unlock参数解锁账户，实现交易的打包。这一步，目的是为在Remix上部署LinkToken合约做准备。</li><li>在metamask上添加创建的账户是为后续在Remix上部署合约做准备</li><li>在Remix上部署LinkToken合约的目的是为后续给预言机节点转账做准备</li></ol><h2 id="用Geth搭建私有链"><a href="#用Geth搭建私有链" class="headerlink" title="用Geth搭建私有链"></a>用Geth搭建私有链</h2><p>下载Geth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ethereum</span><br></pre></td></tr></table></figure><p>随后创建如下的文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/myChain</span><br><span class="line">├── chainlink</span><br><span class="line">└── localChain</span><br><span class="line">    ├── node1</span><br></pre></td></tr></table></figure><p>输入如下命令创建账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo geth --datadir ./ account new</span><br></pre></td></tr></table></figure><p>可以通过两种方式配置创世区块：</p><ul><li>直接配置genesis.json文件</li><li>使用puppeth配置创世区块</li></ul><p>0xedd96278959aA8B27DdC14FD70ACb31f7e7beC2F</p><p>0xCDA9035668b149d18905349Fa8779073e433820C</p><p>如果要直接配置genesis.json文件，可参考如下写法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span>      <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x20000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x2fefd8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span>      <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000042&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mixhash&quot;</span>    <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;0x00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;18aCF602A4C1f4915709bA09A0bFd83A58656CA4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300000000000000000000&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;8c304567E5d337cB60301a998e430F056EF9F622&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;400000000000000000000&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>初始化。<strong>注意每次修改JSON文件后都必须初始化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth init --datadir data testchain.json</span><br></pre></td></tr></table></figure><p>在~&#x2F;myChain&#x2F;localChain&#x2F;node1下启动私链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --networkid 4190 --http --http.addr 0.0.0.0 --http.port 6789 --http.corsdomain &quot;*&quot; --ws --port 30305 --allow-insecure-unlock --unlock edd96278959aA8B27DdC14FD70ACb31f7e7beC2F --keystore ./keystore console</span><br></pre></td></tr></table></figure><p>私链启动以后，就去Metamask添加网络。</p><p>Metamask具体可以看这篇：<a href="https://blog.csdn.net/llslinliansheng/article/details/123596009">https://blog.csdn.net/llslinliansheng/article/details/123596009</a></p><p>私链开启挖矿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">miner.setEtherbase(&quot;edd96278959aa8b27ddc14fd70acb31f7e7bec2f&quot;)</span><br><span class="line">miner.start()</span><br></pre></td></tr></table></figure><h2 id="搭建Chainlink预言机"><a href="#搭建Chainlink预言机" class="headerlink" title="搭建Chainlink预言机"></a>搭建Chainlink预言机</h2><p>由于LinkToken.sol的Solidity代码需要在GitHub拉取，可以通过在主页按T键搜索LinkToken.sol文件，找到文件所在目录，并拉取其V0.4的所有文件。同时要修改import部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/ERC677Token.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StandardToken</span> <span class="keyword">as</span> linkStandardToken &#125; <span class="keyword">from</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/vendor/StandardToken.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LinkToken</span> is linkStandardToken, <span class="title class_">ERC677Token</span> &#123;</span><br><span class="line"></span><br><span class="line">  uint public constant totalSupply = <span class="number">10</span>**<span class="number">27</span>;</span><br><span class="line">  string public constant name = <span class="string">&quot;ChainLink Token&quot;</span>;</span><br><span class="line">  uint8 public constant decimals = <span class="number">18</span>;</span><br><span class="line">  string public constant symbol = <span class="string">&quot;LINK&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">LinkToken</span>(<span class="params"></span>)</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = totalSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address with additional data if the recipient is a contract.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _data The extra data to be passed to the receiving contract.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferAndCall</span>(<span class="params">address _to, uint _value, bytes _data</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferAndCall</span>(_to, _value, _data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transfer</span>(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _spender The address which will spend the funds.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value The amount of tokens to be spent.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address _spender, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_spender)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">approve</span>(_spender,  _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Transfer tokens from one address to another</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _from address The address which you want to send tokens from</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _to address The address which you want to transfer to</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value uint256 the amount of tokens to be transferred</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address _from, address _to, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferFrom</span>(_from, _to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MODIFIERS</span></span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">validRecipient</span>(<span class="params">address _recipient</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(_recipient != <span class="title function_">address</span>(<span class="number">0</span>) &amp;&amp; _recipient != <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后使用Remix部署合约，然而私链终端需要对交易进行打包，解锁账户，开始挖矿。</p><p><img src="/../page_imgs/geth_miner.png" alt="geth_miner"></p><p>安装PostgreSQL和docker，这里不细说。PostgreSQL的安装过程具体可以看这篇文章：<a href="https://linux.cn/article-11480-1.html">技术|如何在 Ubuntu 上安装和配置 PostgreSQL (linux.cn)</a>。</p><p>我使用的PostgreSQL版本和docker版本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">keikei@ubuntu:~$ psql --version</span><br><span class="line">psql (PostgreSQL) 12.14 (Ubuntu 12.14-0ubuntu0.20.04.1)</span><br><span class="line">keikei@ubuntu:~$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           23.0.1</span><br><span class="line"> API version:       1.42</span><br><span class="line"> Go version:        go1.19.5</span><br><span class="line"> Git commit:        a5ee5b1</span><br><span class="line"> Built:             Thu Feb  9 19:46:56 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line">permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>随后在~&#x2F;myChain&#x2F;chainlink&#x2F;.chainlink下创建<code>.env</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ROOT=/chainlink</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line">ETH_CHAIN_ID=4190</span><br><span class="line">CHAINLINK_TLS_PORT=0</span><br><span class="line">LINK_CONTRACT_ADDRESS=0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span><br><span class="line">SECURE_COOKIES=false</span><br><span class="line">ALLOW_ORIGINS=*</span><br><span class="line">ETH_URL=ws://127.0.0.1:8546</span><br><span class="line">DATABASE_URL=postgresql://postgres:Likeqi5201314000@localhost:5432/chainlink?sslmode=disable</span><br><span class="line">DATABASE_TIMEOUT=0</span><br></pre></td></tr></table></figure><p>随后启动预言机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net host -u=root  -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink:1.11.0 local n</span><br></pre></td></tr></table></figure><p>在本地浏览器输入127.0.0.1:6688，打开Chainlink Operator</p><p><img src="/../page_imgs/chainlink_operator.png" alt="Chainlink预言机节点控制台图1"></p><p>至此，Chainlink分布式预言机节点已经搭建完毕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
