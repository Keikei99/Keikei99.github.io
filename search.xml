<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Assembly】未分类的汇编语言</title>
      <link href="/2023/04/05/%E3%80%90Assembly%E3%80%91%E6%9C%AA%E5%88%86%E7%B1%BB%E7%9A%84%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/04/05/%E3%80%90Assembly%E3%80%91%E6%9C%AA%E5%88%86%E7%B1%BB%E7%9A%84%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e8dfd25c115a7035f8ef27adb0521d6ddde3800190e54d48927cdb92e1b9c3c5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】Chainlink Any API</title>
      <link href="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/"/>
      <url>/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在Chainlink官方文档中，<strong>AnyAPI</strong>提及了获取多元链下数据的方式，包括uint256，int256，bool，string，bytes32和bytes六种类型。本文将对单元请求、多元请求、数组请求、大型请求的对应操作进行模拟。</p><p>官方文档的写法：</p><ul><li>Single Word Response</li><li>Multi-Variable Responses</li><li>Array Response</li><li>Large Response</li></ul><p><del>翻译可能不准确，那不管了</del></p><p>不仅如此，Chainlink节点的Job充当了一个辅助预言机节点监听智能合约时间的角色。当用户调用智能合约的请求函数时，请求函数体中会emit一个event事件，从而使预言机节点能够监听到这个event并根据Job的规定作出相应的回应。</p><p>部署合约关键在于指定JobId、LinkToken Address、OperatorAddress和API，但Chainlink官网文档的合约并没有明确指明这四个字段的内容，因此我对他们进行了一些修改，以方便以后修改数据。</p><p>代码可以参考<ahref="https://docs.chain.link/any-api/get-request/introduction">Make aGET Request | Chainlink Documentation</a></p><p>JOB的toml文件怎么写可以参考<ahref="https://docs.chain.link/chainlink-nodes/oracle-jobs/job-types/direct_request">DirectRequest Jobs | Chainlink Documentation</a></p><h2 id="single-word-response">Single Word Response</h2><p>针对单一属性数据的请求，可以在命令行执行以下命令来模拟：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X <span class="string">&#x27;GET&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&amp;tsyms=USD&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept: application/json&#x27;</span></span><br></pre></td></tr></table></figure><p>你将得到像这样的JSON文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;RAW&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ETH&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;USD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;TYPE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MARKET&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CCCAGG&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;FROMSYMBOL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ETH&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;TOSYMBOL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;FLAGS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2049&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PRICE&quot;</span><span class="punctuation">:</span> <span class="number">2867.04</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LASTUPDATE&quot;</span><span class="punctuation">:</span> <span class="number">1650896942</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MEDIAN&quot;</span><span class="punctuation">:</span> <span class="number">2866.2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LASTVOLUME&quot;</span><span class="punctuation">:</span> <span class="number">0.16533939</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LASTVOLUMETO&quot;</span><span class="punctuation">:</span> <span class="number">474.375243849</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LASTTRADEID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1072154517&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;VOLUMEDAY&quot;</span><span class="punctuation">:</span> <span class="number">195241.78281014622</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;VOLUMEDAYTO&quot;</span><span class="punctuation">:</span> <span class="number">556240560.4621655</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;VOLUME24HOUR&quot;</span><span class="punctuation">:</span> <span class="number">236248.94641103</span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>那么我可以获取其中的某个单一字段的数据，比如<code>"VOLUME24HOUR"</code>。以下是获取单一数据的Job和示例合约。</p><h3 id="job">Job</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Get &gt; Uint256 - (TOML) test&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    fetch        [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.get)&quot; allowUnrestrictedNetworkAccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    parse        [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.path)&quot; data=&quot;$(fetch)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    multiply     [type=&quot;multiply&quot; input=&quot;$(parse)&quot; times=&quot;$(decode_cbor.times)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    encode_data  [type=&quot;ethabiencode&quot; abi=&quot;(bytes32 requestId, uint256 value)&quot; data=&quot;&#123; \\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;value\\&quot;: $(multiply) &#125;&quot;]</span></span><br><span class="line"><span class="string">    encode_tx    [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_data)&#125;&quot;</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">    submit_tx    [type=&quot;ethtx&quot; to=&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor -&gt; fetch -&gt; parse -&gt; multiply -&gt; encode_data -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="contract">Contract</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">APIConsumer</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    uint256 public volume;</span><br><span class="line">    bytes32 private jobId;</span><br><span class="line">    uint256 private fee;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// LinkToken合约地址</span></span><br><span class="line">    address constant linkTokenAddress = <span class="number">0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span>;</span><br><span class="line">    <span class="comment">// Operator合约地址</span></span><br><span class="line">    address constant oracleAddress = <span class="number">0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span>;</span><br><span class="line">    <span class="comment">// Chainlink Node JobId</span></span><br><span class="line">    bytes32 myJobId = <span class="string">&quot;97a63b405f35442abf8c84df1b31ed7c&quot;</span>; </span><br><span class="line">    <span class="comment">// API地址</span></span><br><span class="line">    string myApi = <span class="string">&quot;https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&amp;tsyms=USD&quot;</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestVolume</span>(bytes32 indexed requestId, uint256 volume);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(linkTokenAddress);</span><br><span class="line">        <span class="title function_">setChainlinkOracle</span>(oracleAddress);</span><br><span class="line">        jobId = myJobId;</span><br><span class="line">        fee = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0,1 * 10**18 (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a Chainlink request to retrieve API response, find the target</span></span><br><span class="line"><span class="comment">     * data, then multiply by 1000000000000000000 (to remove decimal places from data).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestVolumeData</span>(<span class="params"></span>) public returns (bytes32 requestId) &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            jobId,</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfill</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the URL to perform the GET request on</span></span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            myApi</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the path to find the desired data in the API response, where the response format is:</span></span><br><span class="line">        <span class="comment">// &#123;&quot;RAW&quot;:</span></span><br><span class="line">        <span class="comment">//   &#123;&quot;ETH&quot;:</span></span><br><span class="line">        <span class="comment">//    &#123;&quot;USD&quot;:</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//      &quot;VOLUME24HOUR&quot;: xxx.xxx,</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br><span class="line">        <span class="comment">// request.add(&quot;path&quot;, &quot;RAW.ETH.USD.VOLUME24HOUR&quot;); // Chainlink nodes prior to 1.0.0 support this format</span></span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;RAW,ETH,USD,VOLUME24HOUR&quot;</span>); <span class="comment">// Chainlink nodes 1.0.0 and later support this format</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Multiply the result by 1000000000000000000 to remove decimals</span></span><br><span class="line">        int256 timesAmount = <span class="number">10</span> ** <span class="number">18</span>;</span><br><span class="line">        req.<span class="title function_">addInt</span>(<span class="string">&quot;times&quot;</span>, timesAmount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sends the request</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">sendChainlinkRequest</span>(req, fee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Receive the response in the form of uint256</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfill</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        uint256 _volume</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">_requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestVolume</span>(_requestId, _volume);</span><br><span class="line">        volume = _volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allow withdraw of Link tokens from the contract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署的合约地址为：0x9fAC2f4D6a039e4A0740314543B087c51f29cAE9，随后使用LinkToken合约向该合约转账0.5个LINK。</p><p>整理以上地址信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobid: 97a63b405f35442abf8c84df1b31ed7c</span><br><span class="line">APIConsumer: 0x9fAC2f4D6a039e4A0740314543B087c51f29cAE9</span><br></pre></td></tr></table></figure><p>调用<code>requestVolumeData</code>函数，请求链下API的<code>VOLUME24HOUR</code>，查看ChainlinkOperator控制台情况。</p><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/chainlink_single_word_response.png" class="" title="chainlink_single_word_response"><p>调用<code>Volume</code>函数即可查看返回值</p><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/remix_single_word_response-16814552111081.png" class="" title="remix_single_word_response"><h2 id="multi-variable-responses">Multi-Variable Responses</h2><p>这里我们申请多个数据类型为uint256的数据。废话不多说，直接放出job和合约代码</p><h3 id="job-1">Job</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;multi-word(TOML)&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor</span></span><br><span class="line"><span class="string">    decode_cbor -&gt; btc</span></span><br><span class="line"><span class="string">    decode_cbor -&gt; usd</span></span><br><span class="line"><span class="string">    decode_cbor -&gt; eur</span></span><br><span class="line"><span class="string">    btc          [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.urlBTC)&quot; allowunrestrictednetworkaccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    btc_parse    [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.pathBTC)&quot; data=&quot;$(btc)&quot;]</span></span><br><span class="line"><span class="string">    btc_multiply [type=&quot;multiply&quot; input=&quot;$(btc_parse)&quot;, times=&quot;100000&quot;]</span></span><br><span class="line"><span class="string">    btc -&gt; btc_parse -&gt; btc_multiply</span></span><br><span class="line"><span class="string">    usd          [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.urlUSD)&quot; allowunrestrictednetworkaccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    usd_parse    [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.pathUSD)&quot; data=&quot;$(usd)&quot;]</span></span><br><span class="line"><span class="string">    usd_multiply [type=&quot;multiply&quot; input=&quot;$(usd_parse)&quot;, times=&quot;100000&quot;]</span></span><br><span class="line"><span class="string">    usd -&gt; usd_parse -&gt; usd_multiply</span></span><br><span class="line"><span class="string">    eur          [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.urlEUR)&quot; allowunrestrictednetworkaccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    eur_parse    [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.pathEUR)&quot; data=&quot;$(eur)&quot;]</span></span><br><span class="line"><span class="string">    eurs_multiply [type=&quot;multiply&quot; input=&quot;$(eur_parse)&quot;, times=&quot;100000&quot;]</span></span><br><span class="line"><span class="string">    eur -&gt; eur_parse -&gt; eurs_multiply</span></span><br><span class="line"><span class="string">    btc_multiply -&gt; encode_mwr</span></span><br><span class="line"><span class="string">    usd_multiply -&gt; encode_mwr</span></span><br><span class="line"><span class="string">    eurs_multiply -&gt; encode_mwr</span></span><br><span class="line"><span class="string">    // MWR API does NOT auto populate the requestID.</span></span><br><span class="line"><span class="string">    encode_mwr [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                abi=&quot;(bytes32 requestId, uint256 _btc, uint256 _usd, uint256 _eurs)&quot;</span></span><br><span class="line"><span class="string">                data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;_btc\\&quot;: $(btc_multiply), \\&quot;_usd\\&quot;: $(usd_multiply), \\&quot;_eurs\\&quot;: $(eurs_multiply)&#125;&quot;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">    encode_tx  [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_mwr)&#125;&quot;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">    submit_tx  [type=&quot;ethtx&quot; to=&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string">    encode_mwr -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="contract-1">Contract</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MultiWordConsumer</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    bytes32 private jobId;</span><br><span class="line">    uint256 private fee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// multiple params returned in a single oracle response</span></span><br><span class="line">    uint256 public btc;</span><br><span class="line">    uint256 public usd;</span><br><span class="line">    uint256 public eur;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// LinkToken合约地址</span></span><br><span class="line">    address constant linkTokenAddress = <span class="number">0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span>;</span><br><span class="line">    <span class="comment">// Operator合约地址</span></span><br><span class="line">    address constant oracleAddress = <span class="number">0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span>;</span><br><span class="line">    <span class="comment">// Chainlink Node JobId</span></span><br><span class="line">    bytes32 myJobId = <span class="string">&quot;6073eaa7c1c14e77aef5f9fd8c96eccb&quot;</span>; </span><br><span class="line">    <span class="comment">// API地址</span></span><br><span class="line">    string myApi1 = <span class="string">&quot;https://min-api.cryptocompare.com/data/price?fsym=ETH&amp;tsyms=BTC&quot;</span>;</span><br><span class="line">    string myApi2 = <span class="string">&quot;https://min-api.cryptocompare.com/data/price?fsym=ETH&amp;tsyms=USD&quot;</span>;</span><br><span class="line">    string myApi3 = <span class="string">&quot;https://min-api.cryptocompare.com/data/price?fsym=ETH&amp;tsyms=EUR&quot;</span>;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestMultipleFulfilled</span>(</span><br><span class="line">        bytes32 indexed requestId,</span><br><span class="line">        uint256 btc,</span><br><span class="line">        uint256 usd,</span><br><span class="line">        uint256 eur</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@notice</span> Initialize the link token and target oracle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> The oracle address must be an Operator contract for multiword response</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Sepolia Testnet details:</span></span><br><span class="line"><span class="comment">     * Link Token: 0x779877A7B0D9E8603169DdbD7836e478b4624789</span></span><br><span class="line"><span class="comment">     * Oracle: 0x6090149792dAAeE9D1D568c9f9a6F6B46AA29eFD (Chainlink DevRel)</span></span><br><span class="line"><span class="comment">     * jobId: 53f9755920cd451a8fe46f5087468395</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(linkTokenAddress);</span><br><span class="line">        <span class="title function_">setChainlinkOracle</span>(<span class="number">0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span>);</span><br><span class="line">        jobId = myJobId;</span><br><span class="line">        fee = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0,1 * 10**18 (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@notice</span> Request mutiple parameters from the oracle in a single transaction</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestMultipleParameters</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            jobId,</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfillMultipleParameters</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;urlBTC&quot;</span>,</span><br><span class="line">            myApi1</span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;pathBTC&quot;</span>, <span class="string">&quot;BTC&quot;</span>);</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;urlUSD&quot;</span>,</span><br><span class="line">            myApi2</span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;pathUSD&quot;</span>, <span class="string">&quot;USD&quot;</span>);</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;urlEUR&quot;</span>,</span><br><span class="line">            myApi3</span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;pathEUR&quot;</span>, <span class="string">&quot;EUR&quot;</span>);</span><br><span class="line">        <span class="title function_">sendChainlinkRequest</span>(req, fee); <span class="comment">// MWR API.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@notice</span> Fulfillment function for multiple parameters in a single request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> This is called by the oracle. recordChainlinkFulfillment must be used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfillMultipleParameters</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 requestId,</span></span><br><span class="line"><span class="params">        uint256 btcResponse,</span></span><br><span class="line"><span class="params">        uint256 usdResponse,</span></span><br><span class="line"><span class="params">        uint256 eurResponse</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestMultipleFulfilled</span>(</span><br><span class="line">            requestId,</span><br><span class="line">            btcResponse,</span><br><span class="line">            usdResponse,</span><br><span class="line">            eurResponse</span><br><span class="line">        );</span><br><span class="line">        btc = btcResponse;</span><br><span class="line">        usd = usdResponse;</span><br><span class="line">        eur = eurResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allow withdraw of Link tokens from the contract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署得到的合约地址：0xd214Ce7721dd13F32e59c45Fee97eA26d3f2aE94</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobId: 6073eaa7c1c14e77aef5f9fd8c96eccb</span><br><span class="line">MultiWordConsumer: 0xd214Ce7721dd13F32e59c45Fee97eA26d3f2aE94</span><br></pre></td></tr></table></figure><p>转LINK，调用函数，查看Chainlink Operator控制台</p><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/chainlink_multi_variables_responses.png" class="" title="chainlink_multi_variables_responses"><p>)</p><p>Remix</p><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/remix_multi_variables_responses.png" class="" title="remix_multi_variables_responses"><h2 id="array-response">Array Response</h2><p>针对JSON数据源是数组的情况，本例在添加path路径时指定了JSON路径。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;0,id&quot;</span>); <span class="comment">// Chainlink nodes 1.0.0 and later support this format</span></span><br></pre></td></tr></table></figure><p>这次我们请求string类型的数据。</p><h3 id="job-2">Job</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.</span></span><br><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"># DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Get &gt; String&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    fetch        [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.get)&quot; allowUnrestrictedNetworkAccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    parse        [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.path)&quot; data=&quot;$(fetch)&quot;]</span></span><br><span class="line"><span class="string">    encode_data  [type=&quot;ethabiencode&quot; abi=&quot;(bytes32 requestId, string value)&quot; data=&quot;&#123; \\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;value\\&quot;: $(parse) &#125;&quot;]</span></span><br><span class="line"><span class="string">    encode_tx    [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_data)&#125;&quot;</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">    submit_tx    [type=&quot;ethtx&quot; to=&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor -&gt; fetch -&gt; parse -&gt; encode_data -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="contract-2">Contract</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">FetchFromArray</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    string public id;</span><br><span class="line"></span><br><span class="line">    bytes32 private jobId;</span><br><span class="line">    uint256 private fee;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestFirstId</span>(bytes32 indexed requestId, string id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LinkToken合约地址</span></span><br><span class="line">    address constant linkTokenAddress = <span class="number">0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span>;</span><br><span class="line">    <span class="comment">// Operator合约地址</span></span><br><span class="line">    address constant oracleAddress = <span class="number">0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span>;</span><br><span class="line">    <span class="comment">// Chainlink Node JobId</span></span><br><span class="line">    bytes32 myJobId = <span class="string">&quot;fdef9cbf8826404fa94d9e114ef28fb4&quot;</span>; </span><br><span class="line">    <span class="comment">// API地址</span></span><br><span class="line">    string myApi = <span class="string">&quot;https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&amp;per_page=10&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(linkTokenAddress);</span><br><span class="line">        <span class="title function_">setChainlinkOracle</span>(oracleAddress);</span><br><span class="line">        jobId = myJobId;</span><br><span class="line">        fee = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0,1 * 10**18 (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a Chainlink request to retrieve API response, find the target</span></span><br><span class="line"><span class="comment">     * data which is located in a list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestFirstId</span>(<span class="params"></span>) public returns (bytes32 requestId) &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            jobId,</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfill</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the URL to perform the GET request on</span></span><br><span class="line">        <span class="comment">// API docs: https://www.coingecko.com/en/api/documentation?</span></span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            myApi</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the path to find the desired data in the API response, where the response format is:</span></span><br><span class="line">        <span class="comment">// [&#123;</span></span><br><span class="line">        <span class="comment">//  &quot;id&quot;: &quot;bitcoin&quot;,</span></span><br><span class="line">        <span class="comment">//  &quot;symbol&quot;: btc&quot;,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// .. &#125;]</span></span><br><span class="line">        <span class="comment">// request.add(&quot;path&quot;, &quot;0.id&quot;); // Chainlink nodes prior to 1.0.0 support this format</span></span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;0,id&quot;</span>); <span class="comment">// Chainlink nodes 1.0.0 and later support this format</span></span><br><span class="line">        <span class="comment">// Sends the request</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">sendChainlinkRequest</span>(req, fee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Receive the response in the form of string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfill</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        string memory _id</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">_requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestFirstId</span>(_requestId, _id);</span><br><span class="line">        id = _id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allow withdraw of Link tokens from the contract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理地址信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobId: fdef9cbf8826404fa94d9e114ef28fb4</span><br><span class="line">FetchFromArray: 0x938F9cAdf3de9b36921E223dde4Ba3E3Cb535867</span><br></pre></td></tr></table></figure><p>调用函数，结果发现job的fetch处报<code>http request timed out or interrupted</code>，于是我点进了API链接，结果居然无法访问？</p><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/error_chainlink.png" class="" title="error_chainlink"><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/error_web.png" class="" title="error_web"><p>那没事了，我们可以试着换成另一个API让Chainlink预言机获取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newAPI: https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&amp;tsyms=USD</span><br><span class="line">path: &#x27;RAW,ETH,USD,LASTTRADEID&#x27;</span><br><span class="line">FetchFromArray: 0x27E14F41A461E9861e0948B702bDaaBC2121E1d5</span><br></pre></td></tr></table></figure><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/chainlink_fetch_string.png" class="" title="chainlink_fetch_string"><img src="/2023/04/01/%E3%80%90Chainlink%E3%80%91Chainlink-Any-API/remix_fetch_string.png" class="" title="remix_fetch_string"><p>很难不怀疑这是API自身的问题......不过在后期我们还能用php手写一个API，这里我们不做演示。</p><h2 id="large-responses">Large Responses</h2><p>这里我们可以获取任意字节长度的数据，数据类型为Bytes。同理，根据上面的方法照样能得到我们想要的结果。这里不作演示。</p><h3 id="job-3">Job</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.</span></span><br><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"># DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Get &gt; String&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    fetch        [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.get)&quot; allowUnrestrictedNetworkAccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    parse        [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.path)&quot; data=&quot;$(fetch)&quot;]</span></span><br><span class="line"><span class="string">    encode_data  [type=&quot;ethabiencode&quot; abi=&quot;(bytes32 requestId, string value)&quot; data=&quot;&#123; \\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;value\\&quot;: $(parse) &#125;&quot;]</span></span><br><span class="line"><span class="string">    encode_tx    [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_data)&#125;&quot;</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">    submit_tx    [type=&quot;ethtx&quot; to=&quot;0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor -&gt; fetch -&gt; parse -&gt; encode_data -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="contract-3">Contract</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GenericLargeResponse</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// variable bytes(arbitrary-length raw byte data) returned in a single oracle response</span></span><br><span class="line">    bytes public data;</span><br><span class="line">    string public image_url;</span><br><span class="line"></span><br><span class="line">    bytes32 private jobId;</span><br><span class="line">    uint256 private fee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LinkToken合约地址</span></span><br><span class="line">    address constant linkTokenAddress = <span class="number">0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span>;</span><br><span class="line">    <span class="comment">// Operator合约地址</span></span><br><span class="line">    address constant oracleAddress = <span class="number">0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span>;</span><br><span class="line">    <span class="comment">// Chainlink Node JobId</span></span><br><span class="line">    bytes32 myJobId = <span class="string">&quot;fdef9cbf8826404fa94d9e114ef28fb4&quot;</span>; </span><br><span class="line">    <span class="comment">// API地址</span></span><br><span class="line">    string myApi = <span class="string">&quot;https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(linkTokenAddress);</span><br><span class="line">        <span class="title function_">setChainlinkOracle</span>(oracleAddress);</span><br><span class="line">        jobId = myJobId;</span><br><span class="line">        fee = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0,1 * 10**18 (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@notice</span> Request variable bytes from the oracle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestBytes</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            jobId,</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfillBytes</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            myApi</span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;image&quot;</span>);</span><br><span class="line">        <span class="title function_">sendChainlinkRequest</span>(req, fee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestFulfilled</span>(bytes32 indexed requestId, bytes indexed data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@notice</span> Fulfillment function for variable bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> This is called by the oracle. recordChainlinkFulfillment must be used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfillBytes</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 requestId,</span></span><br><span class="line"><span class="params">        bytes memory bytesData</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestFulfilled</span>(requestId, bytesData);</span><br><span class="line">        data = bytesData;</span><br><span class="line">        image_url = <span class="title function_">string</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allow withdraw of Link tokens from the contract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>根据Chainlink官方提供的获取多种数据类型的方法，我们能够通过任意的API从链上获取到我们想要的数据，并将他们运用到我们的合约逻辑中，实现数据的链上链下协同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】递归与递推</title>
      <link href="/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/"/>
      <url>/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="递推与递归">递推与递归</h2><h3 id="递归实现指数型枚举">递归实现指数型枚举</h3><p>原题链接：<a href="https://www.acwing.com/problem/content/94/">92.递归实现指数型枚举 - AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归实现排列型枚举">递归实现排列型枚举</h3><p>原题链接：<a href="https://www.acwing.com/problem/content/96/">94.递归实现排列型枚举 - AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 01:37:12</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> state[N];</span><br><span class="line"><span class="type">bool</span> used[N]; <span class="comment">// true表示用过 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; n) &#123; <span class="comment">// 边界 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, state[i]); <span class="comment">// 打印方案 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依次枚举每个分支，即当前位置可以填哪些数 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">            state[u] = i;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span> (u + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            state[u] = <span class="number">0</span>;</span><br><span class="line">            used[i] = <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="翻硬币">翻硬币</h3><p>原题链接：<ahref="https://www.acwing.com/problem/content/1210/">1208. 翻硬币 -AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> start[N], aim[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start[i] == <span class="string">&#x27;*&#x27;</span>) start[i] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (start[i] == <span class="string">&#x27;o&#x27;</span>) start[i] = <span class="string">&#x27;*&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; start &gt;&gt; aim;</span><br><span class="line">    n = <span class="built_in">strlen</span>(start);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start[i] != aim[i]) &#123;</span><br><span class="line">            <span class="built_in">turn</span>(i), <span class="built_in">turn</span>(i + <span class="number">1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开关只按一次</span></span><br><span class="line"><span class="comment">// 顺序无关紧要 </span></span><br></pre></td></tr></table></figure><h3 id="飞行员兄弟">飞行员兄弟</h3><p>原题链接：<a href="https://www.acwing.com/problem/content/118/">116.飞行员兄弟 - AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 枚举所有方案  0 ~ 2^16 - 1 每一个数看作一个16位的二进制数 </span></span><br><span class="line"><span class="comment">2. 按照该方案对所有灯泡进行操作</span></span><br><span class="line"><span class="comment">3. 判断灯泡是否全亮 =&gt; 记录方案 </span></span><br><span class="line"><span class="comment">O(n) = 2^16 * (16 * 7 + 16 + 16)</span></span><br><span class="line"><span class="comment">（1）步数最小 -- 记录</span></span><br><span class="line"><span class="comment">（2）字典序最小 -- 优先枚举标号小的，所得到的答案就是字典序最小的 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0  1  2  3 </span></span><br><span class="line"><span class="comment">4  5  6  7</span></span><br><span class="line"><span class="comment">8  9  10 11</span></span><br><span class="line"><span class="comment">12 13 14 15 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[N][N], backup[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">4</span> + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn_one</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;+&#x27;</span>) g[x][y] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> g[x][y] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn_all</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="built_in">turn_one</span>(x, i);</span><br><span class="line"><span class="built_in">turn_one</span>(i, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">turn_one</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; g[i];</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;PII&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> op = <span class="number">0</span>; op &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; op++) &#123;</span><br><span class="line">vector&lt;PII&gt; temp; <span class="comment">// 用于记录步骤 </span></span><br><span class="line"><span class="built_in">memcpy</span>(backup, g, <span class="built_in">sizeof</span>(g)); <span class="comment">// 备份 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行操作 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="comment">// 判断在op的二进制表示中，get(i,j)位的数是否为1 </span></span><br><span class="line"><span class="keyword">if</span> (op &gt;&gt; <span class="built_in">get</span>(i, j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(&#123;i, j&#125;);</span><br><span class="line"><span class="built_in">turn_all</span>(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断所有灯泡是否全亮</span></span><br><span class="line"><span class="type">bool</span> has_closed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">has_closed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (has_closed == <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="built_in">empty</span>() || res.<span class="built_in">size</span>() &gt; temp.<span class="built_in">size</span>()) &#123;</span><br><span class="line">res = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(g, backup, <span class="built_in">sizeof</span>(g)); <span class="comment">// 还原</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> op : res) &#123;</span><br><span class="line">cout &lt;&lt; op.x + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; op.y + <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】二分与前缀和</title>
      <link href="/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="整数二分">整数二分</h2><ol type="1"><li>确定一个区间，使得我们找的目标值一定在这个区间里</li><li>找一个性质，满足：<ol type="1"><li>性质具有二段性（前半段满足，后半段不满足）</li><li>答案是二段性的分界点</li></ol></li></ol><p>答案有两种：一种是前半段的右端点，一种是后半段的左端点</p><ul><li><strong>第一类：答案是前半段的右端点</strong></li></ul><p>将(L, R)分成(L, M - 1)和(M, R)</p><p>if M是红色的，说明ans必然在(M, R)</p><p>else 说明ans必然在(L, M - 1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line"><span class="type">int</span> M = (L + R + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// 一定要补上1，实际上计算的是ceil(L + R / 2)</span></span><br><span class="line"><span class="keyword">if</span> M红 L = M;</span><br><span class="line"><span class="keyword">else</span> R = M - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>第二类：答案是后半段的左端点</strong></li></ul><p>将(L, R)分成(L, M)和(M + 1, R)</p><p>if M是绿色的，说明ans必然实在M的左边（L, M）</p><p>else 说明ans必然在(M + 1, R)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line"><span class="type">int</span> M = (L + R) / <span class="number">2</span>; <span class="comment">// 这里没有加1</span></span><br><span class="line"><span class="keyword">if</span> M绿 R = M;</span><br><span class="line"><span class="keyword">else</span> L = M + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看L=M和R=M</p><p>整数二分步骤：</p><ol type="1"><li>找一个区间[L, R]，使得答案一定在该区间中</li><li>找一个判断条件，使得该判断条件具有二段性，并且答案一定是该二段性的分界点</li><li>分析中点M在该判断条件下是否成立，如果成立，考虑答案在哪个区间；如果不成立，判断答案在哪个区间</li><li>如果更新方式写的是R = mid，则不用做任何处理；如果更新方式写的是L =mid，则需要在计算mid时加1</li></ol><h2 id="实数二分">实数二分</h2><p>将区间(L,R)划分成[L, M]和[M, R]</p><p>区间长度足够小的时侯停止 while (R - L &gt; 1e-6)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (R - L &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line"><span class="type">double</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> ans在[M, R] L = M;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ans在[L, m] R = M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：有单调性一定可以二分，能二分的不一定单调</strong></p><h3 id="数的范围">数的范围</h3><p>原题链接：<a href="https://www.acwing.com/problem/content/791/">789.数的范围 - AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 左端点：一定是大于等于x的第一个位置</span></span><br><span class="line"><span class="comment"> 判断条件：q[mid] &gt;= x</span></span><br><span class="line"><span class="comment"> 如果答案存在，这个答案一定是一段x的左端点</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 如果 q[R] != x 说明答案不存在</span></span><br><span class="line"><span class="comment"> 否则说明L和R就是x的左端点 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 右端点：从[左边界, n-1] 从右往左小于等于x的第一个位置 </span></span><br><span class="line"><span class="comment"> 判断条件：q[mix] &lt;= x </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读入每个询问 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (q[mid] &gt;= x) &#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (q[r] == x) &#123;</span><br><span class="line"><span class="comment">// 说明存在左端点</span></span><br><span class="line">cout &lt;&lt; r &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">// 二分x的右端点 </span></span><br><span class="line">r = n - <span class="number">1</span>; <span class="comment">// 右端点一定在[左端点，n-1]之间 </span></span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>; <span class="comment">// 因为写的时l=mid，所以需要补上1 </span></span><br><span class="line"><span class="keyword">if</span> (q[mid] &lt;= x) &#123;</span><br><span class="line">l = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">cout &lt;&lt; l &lt;&lt; endl; <span class="comment">// 最后l和r必然是相等的 </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="数的三次方根">数的三次方根</h3><p>原题链接：<a href="https://www.acwing.com/problem/content/792/">790.数的三次方根 - AcWing题库</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (m * m * m &gt;= x) R = M;</span></span><br><span class="line"><span class="comment">else L = M; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="type">double</span> l = <span class="number">-10000</span>, r = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (mid * mid * mid &gt;= x) &#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三分法">三分法</h3><p>一般是单峰函数或者单谷函数。求导，对导数进行二分。</p><h2 id="前缀和">前缀和</h2><p>待续...</p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】使用Chainlink预言机获取链下数据</title>
      <link href="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在上一篇博客的基础上，本文将详细介绍Chainlink获取链下数据的方法。</p><p>本文需要在Remix上部署三个智能合约，分别是LinkToken.sol、Operator.sol和ATestnetConsumer.sol。而LinkToken合约的部署流程已在上文详细给出，这里我写一下跳转链接：<ahref="https://keikei99.github.io/2023/03/17/%5BChainlink%5D基于私链运行一个Chainlink预言机节点/">【Chainlink】基于私链运行一个Chainlink预言机节点| Keike1 (keikei99.github.io)</a>。</p><p>区块链上的用户作为数据获取方，需要从链下的数据提供方获取数据，而区块链本身不具备获取现实世界数据的能力，因此需要使用Chainlink预言机作为连接链上和链下之间的桥梁。下面我们将模拟用户获取数据的这个过程。</p><h2 id="部署operator.sol合约">部署Operator.sol合约</h2><p><ahref="https://remix.ethereum.org/#url=https://docs.chain.link/samples/ChainlinkNodes/Operator.sol">Operator.sol</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.6</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.7/Operator.sol&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/deploy_operator.png" class="" title="deploy_operator"><p>部署完要记得把合约地址记录下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Operator: 0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span><br></pre></td></tr></table></figure><p>随后调用setAuthorizedSenders方法，填自己的账户地址，注意要以数组形式传递。如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;0x0688AbDa371A869DcBb56d2E946A6898660ECDef&quot;]</span><br></pre></td></tr></table></figure><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/set_senders.png" class="" title="set_senders"><p>可以用<code>isAuthorizedSender</code>来判断是否设置成功</p><figure><imgsrc="https://docs.chain.link/images/chainlink-nodes/node-operators/operator-isauthorizedsender.jpg"alt="A screenshot showing Chainlink node whitelisted in Remix." /><figcaption aria-hidden="true">A screenshot showing Chainlink nodewhitelisted in Remix.</figcaption></figure><h2 id="在chainlink-operator中创建新的job">在ChainlinkOperator中创建新的Job</h2><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/new_job.png" class="" title="new_job"><p>写入以下内容</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.</span></span><br><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"># DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="comment"># Optional External Job ID: Automatically generated if unspecified</span></span><br><span class="line"><span class="comment"># externalJobID = &quot;b1d42cd5-4a3a-4200-b1f7-25a68e48aad8&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;YOUR_OPERATOR_CONTRACT_ADDRESS&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    fetch        [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.get)&quot; allowUnrestrictedNetworkAccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    parse        [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.path)&quot; data=&quot;$(fetch)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    multiply     [type=&quot;multiply&quot; input=&quot;$(parse)&quot; times=&quot;$(decode_cbor.times)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    encode_data  [type=&quot;ethabiencode&quot; abi=&quot;(bytes32 requestId, uint256 value)&quot; data=&quot;&#123; \\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;value\\&quot;: $(multiply) &#125;&quot;]</span></span><br><span class="line"><span class="string">    encode_tx    [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_data)&#125;&quot;</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">    submit_tx    [type=&quot;ethtx&quot; to=&quot;YOUR_OPERATOR_CONTRACT_ADDRESS&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor -&gt; fetch -&gt; parse -&gt; multiply -&gt; encode_data -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意将以上的<strong>两个</strong><code>YOUR_OPERATOR_CONTRACT_ADDRESS</code>改为你的Operator合约地址。</p><p>随后复制系统给出的<code>externalJobId</code>备用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JobId: e22cd821-ecb1-405f-9525-d273acc8d66e</span><br></pre></td></tr></table></figure><h2 id="部署atestnetconsumer合约">部署ATestnetConsumer合约</h2><p><ahref="https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol">ATestnetConsumer.sol</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"> * DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ATestnetConsumer</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    uint256 private constant <span class="variable constant_">ORACLE_PAYMENT</span> = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0.1 * 10**18</span></span><br><span class="line">    uint256 public currentPrice;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestEthereumPriceFulfilled</span>(</span><br><span class="line">        bytes32 indexed requestId,</span><br><span class="line">        uint256 indexed price</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Sepolia</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@dev</span> LINK address in Sepolia network: 0x779877A7B0D9E8603169DdbD7836e478b4624789</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> Check https://docs.chain.link/docs/link-token-contracts/ for LINK address for the right network</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(<span class="number">0x779877A7B0D9E8603169DdbD7836e478b4624789</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestEthereumPrice</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _oracle,</span></span><br><span class="line"><span class="params">        string memory _jobId</span></span><br><span class="line"><span class="params">    </span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            <span class="title function_">stringToBytes32</span>(_jobId),</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfillEthereumPrice</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://min-api.cryptocompare.com/data/price?fsym=ETH&amp;tsyms=USD&quot;</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;USD&quot;</span>);</span><br><span class="line">        req.<span class="title function_">addInt</span>(<span class="string">&quot;times&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="title function_">sendChainlinkRequestTo</span>(_oracle, req, <span class="variable constant_">ORACLE_PAYMENT</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfillEthereumPrice</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        uint256 _price</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">_requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestEthereumPriceFulfilled</span>(_requestId, _price);</span><br><span class="line">        currentPrice = _price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getChainlinkToken</span>(<span class="params"></span>) public view returns (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">chainlinkTokenAddress</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cancelRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        uint256 _payment,</span></span><br><span class="line"><span class="params">        bytes4 _callbackFunctionId,</span></span><br><span class="line"><span class="params">        uint256 _expiration</span></span><br><span class="line"><span class="params">    </span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">cancelChainlinkRequest</span>(</span><br><span class="line">            _requestId,</span><br><span class="line">            _payment,</span><br><span class="line">            _callbackFunctionId,</span><br><span class="line">            _expiration</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">stringToBytes32</span>(<span class="params"></span></span><br><span class="line"><span class="params">        string memory source</span></span><br><span class="line"><span class="params">    </span>) private pure returns (bytes32 result) &#123;</span><br><span class="line">        bytes memory tempEmptyStringTest = <span class="title function_">bytes</span>(source);</span><br><span class="line">        <span class="keyword">if</span> (tempEmptyStringTest.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// solhint-disable-line no-inline-assembly</span></span><br><span class="line">            result := <span class="title function_">mload</span>(<span class="title function_">add</span>(source, <span class="number">32</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里注意将第29行的setChainlinkToken的参数改为之前部署的LinkToken合约地址</strong></p><h2 id="在metamask中导入link代币">在Metamask中导入LINK代币</h2><p>私有链中可以有多种代币，这里我们使用Metamask去管理我们的账户余额以方便我们在Remix部署合约。</p><p>打开Metamask，点击Assets，点击Import tokens</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/import_tokens.png" class="" title="import_tokens"><p>然后填入你的LinkToken合约地址和它的代币符号LINK就行。</p><h2id="利用linktoken合约向atestnetconsumer合约转账">利用LinkToken合约向ATestnetConsumer合约转账</h2><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/transfer.png" class="" title="transfer"><p>这里我转入了1个LINK，根据实际需要转就可以了。转账以后，去原来部署的ATestnetConsumer合约中调用<code>requestEthereumPrice</code>方法。</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/request_data.png" class="" title="request_data"><p>_oracle填入Operator合约地址，_jobId填入刚刚在控制台得到的JobId。</p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p>最后点击currentPrice，ETH/USD的汇率就出现了。</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/current_price.png" class="" title="current_price"><p>至此，我们实现了在区块链中获取链下的价格数据。在实际的开发中，可以将这种单一的数据拓展为特定的业务数据，以实现区块链与预言机在特定领域的应用。</p><p><ahref="https://zhuanlan.zhihu.com/p/373828717">基本请求模型--单预言机工作模式- 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust】所有权Ownership</title>
      <link href="/2023/03/20/%E3%80%90Rust%E3%80%91%E6%89%80%E6%9C%89%E6%9D%83Ownership/"/>
      <url>/2023/03/20/%E3%80%90Rust%E3%80%91%E6%89%80%E6%9C%89%E6%9D%83Ownership/</url>
      
        <content type="html"><![CDATA[<h2 id="所有权">所有权</h2><p>核心内容：</p><ol type="1"><li>Rust中的每一个值都有一个<strong>所有者</strong>（<em>owner</em>）。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><p>变量有变量名和对应的内存分配空间。Rust中的所有权定义<strong>该变量与变量名和对应的存储空间相绑定</strong>，在作用域结束时拥有所有权的变量的存储空间会被释放，而没有所有权的变量则忽略释放空间的操作。</p><p>Rust编译器会隐式调用Copy函数和Clone函数。Copy即复制一份完全一样的变量，而不会转移将原有变量的所有权，举例如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n1</span>: <span class="type">u32</span> = <span class="number">114514</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n2</span> = n1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;n1 = &#123;&#125; and n2 = &#123;&#125;&quot;</span>, n1, n2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n1 = 114514 and n2 = 114514</span><br></pre></td></tr></table></figure><p>上例的u32类型没有发生所有权转移，而对于String类型的数据，会发生所有权转移的情况。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blockchain is so interesting&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">keikei@LAPTOP-VME6S439:~/rust_study/ownership$ cargo run</span><br><span class="line">   Compiling ownership v0.1.0 (/home/keikei/rust_study/ownership)</span><br><span class="line">error: 2 positional arguments in format string, but no arguments were given</span><br><span class="line">  --&gt; src/main.rs:57:20</span><br><span class="line">   |</span><br><span class="line">57 |     println!(&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;);</span><br><span class="line">   |                    ^^          ^^</span><br><span class="line"></span><br><span class="line">error: could not compile `ownership` (bin &quot;ownership&quot;) due to previous error</span><br><span class="line">keikei@LAPTOP-VME6S439:~/rust_study/ownership$ cargo run</span><br><span class="line">   Compiling ownership v0.1.0 (/home/keikei/rust_study/ownership)</span><br><span class="line">error[E0382]: borrow of moved value: `s1`</span><br><span class="line">  --&gt; src/main.rs:57:37</span><br><span class="line">   |</span><br><span class="line">55 |     let s1 = String::from(&quot;Blockchain is so interesting&quot;);</span><br><span class="line">   |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait</span><br><span class="line">56 |     let s2 = s1;</span><br><span class="line">   |              -- value moved here</span><br><span class="line">57 |     println!(&quot;s1 = &#123;&#125; ans s2 = &#123;&#125;&quot;, s1, s2);</span><br><span class="line">   |                                     ^^ value borrowed here after move</span><br><span class="line">   |</span><br><span class="line">   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)</span><br><span class="line">help: consider cloning the value if the performance cost is acceptable</span><br><span class="line">   |</span><br><span class="line">56 |     let s2 = s1.clone();</span><br><span class="line">   |                ++++++++</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0382`.</span><br><span class="line">error: could not compile `ownership` (bin &quot;ownership&quot;) due to previous error</span><br></pre></td></tr></table></figure><p>如果把<code>let s2 = s1;</code>改为<code>let s2 = s1.clone();</code>，编译能够通过。说明我们在对复杂数据类型进行操作时需要显式的调用<code>clone</code>函数。</p><p>官方文档的说法：</p><p>任何一组简单标量值的组合都可以实现<code>Copy</code>，任何不需要分配内存或某种形式资源的类型都可以实现<code>Copy</code> 。如下是一些 <code>Copy</code> 的类型：</p><ul><li>所有整数类型，比如 <code>u32</code>。</li><li>布尔类型，<code>bool</code>，它的值是 <code>true</code> 和<code>false</code>。</li><li>所有浮点数类型，比如 <code>f64</code>。</li><li>字符类型，<code>char</code>。</li><li>元组，当且仅当其包含的类型也都实现 <code>Copy</code>的时候。比如，<code>(i32, i32)</code> 实现了 <code>Copy</code>，但<code>(i32, String)</code> 就没有。</li></ul><h2 id="引用和借用">引用和借用</h2><p>&amp;的出现能允许你使用值但不获取所有权，多在函数传参时使用。如果这个参数的值需要改变，那还必须指定&amp;mut，说明该参数是原变量的可变引用。同理，可变引用不具有所有权。</p><p>可变引用只能引用一次，因为可变引用归根结底是指向同一份内存空间。假设存在两个可变引用<code>&amp;mut a</code>和<code>&amp;mut b</code>都指向1这个值，如果a被修改为2了，那b的值到底是1还是2呢？所以Rust会拒绝这样的操作以防止数据竞争。</p><p>Rust只允许有一个可变引用或者多个不可变引用，可变引用和不可变引用不能同时存在。</p><p>一个引用的作用域从声明的地方开始一直持续到最后一次使用为止。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r2</span> = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line">    <span class="comment">// 此位置之后 r1 和 r2 不再使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello and hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="slice类型">Slice类型</h2><p>RustSlice（切片）是对数据值的部分引用，比如<code>&amp;s[0..i]</code>可以指定引用起始索引为0，长度为i的字符串</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn first_word(s: &amp;String) -&gt; usize</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_word</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;s[..];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】Chainlink相关</title>
      <link href="/2023/03/19/%E3%80%90Chainlink%E3%80%91Chainlink%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/03/19/%E3%80%90Chainlink%E3%80%91Chainlink%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="白皮书速览">白皮书速览</h2><p>Chainlink白皮书地址：<ahref="https://research.chain.link/whitepaper-v2.pdf?_ga=2.203170515.376502038.1679147678-150248235.1677582268">whitepaper-v2.pdf(chain.link)</a></p><p>摘自<ahref="https://zhuanlan.zhihu.com/p/415515492">一文速览Chainlink2.0白皮书 - 知乎 (zhihu.com)</a></p><p>Chainlink2.0是在原版白皮书的基础上做的进一步扩展，<u>其愿景是为智能合约快速可靠地接入任何链下数据源和链下计算资源，并同时保障隐私，补充并增强已有和新增区块链的性能。</u>（<strong><em>为区块链接入链下数据，是链上和链下的桥梁</em></strong>）从愿景中不难发现，Chainlink服务的是现存及潜在所有区块链的智能合约，不仅为他们提供链下数据，还提供链下计算，完全满足智能合约的任意链下需求。</p><p>为实现这一愿景，Chainlink 2.0提出去中心化预言机网络（DON）的概念，DON是由一组Chainlink节点负责维护的网络，节点基于委员会的共识协议，可灵活选择并部署任何预言机功能。<u>DON的提出将原本功能性的预言机拓宽为预言机集群，实现预言机拓扑结构由点状到网状的演进。</u>（<strong><em>Chainlink本身是一种特殊的分布式节点集群，一定程度上避免了传统预言机存在被单点攻击的风险</em></strong>）DON的最大优势是可以快速启动新的区块链服务，无需为每个区块链或者每种服务开发新的专用网络。这样一来，无论新的应用场景如何变化，DON都能迅速响应，及时接入。</p><p>DON由可执行程序和适配器组成，其中可执行程序是确定性的程序，而适配器是DON与外界交互的接口。可执行程序类似智能合约，可执行特定计算，如生成随机数，触发链上合约自动执行等。适配器类似接口转换器，使得DON可以与区块链、Web服务器、存储服务器以及其他DON连接。</p><p>Chainlink2.0白皮书中还列举DON的5个实际用例，分别是：储备金证明，<u>接入企业/传统系统</u>，去中心化身份，优先通道及保障DeFi隐私的Mixicles。</p><p>储备金证明常用于不同区块链之间的消息验证，如用户在比特币链锁仓BTC后在以太坊上发行WBTC，这时候以太坊应用就需要验证比特币链上确实锁仓足额BTC。使用储备金证明，DON可以获取比特币链上的储备信息，并反馈给以太坊应用，确保WBTC的发行背书。<u>由于DON的连接特性，企业无需进行额外开发就能将传统系统数据发送至区块链，大大方便接入企业的传统系统</u>。去中心化身份是指通过区块链建立用户的身份信息，信息可以来自传统系统如银行系统等的信用数据，通过DON将这类隐私数据提供给智能合约使用，能够实现低抵押借贷、KYC等区块链应用。优先通道是矿工为用户提供的一种保证，保证用户的交易将在某个区块存储到链上，可以用DON轻松实现。Mixicles是由ChainlinkLabs提出的隐私保护DeFi工具，可保证在不披露底层资产信息的前提下进行二元期权交易。</p><p>Chainlink2.0白皮书单独介绍DON的公允排序服务（FSS）。公允排序包括两方面：一是排序按照节点接收交易的时间先后进行；二是保存交易之间的因果关系。所谓因果关系，是指隐藏交易数据，等到共识层完成排序后再披露交易顺序，以达到防止改变交易之间的因果关系。由此可知，公允排序服务可以有效消除抢跑交易。</p><p>Chainlink2.0白皮书提到DON采用的交易执行框架（TEF）。TEF具有<u>高性能、低费用、隐私保护等优点</u>，支持任意L2执行技术和范式，可以快速更新主网智能合约，同时保留主网的关键可信度。</p><p>去中心化也是Chainlink2.0白皮书重点关注的内容，并根据数据经由数据源到DON再到主网智能合约的流向逐一讨论去中心化方案。针对数据源，设计数据源认证机制，保证数据确实由可信数据源未经篡改提供；针对DON，设计成熟客户端，防止客户端出现故障，支持少数派报告；针对主网智能合约，建立监控和失效安全机制，实行信任最小化治理，为DON节点建立链上身份等。</p><p>建立去中心化信任模型的一个关键措施是设计合理的经济激励机制，Chainlink2.0白皮书分别<u>采用显性和隐性经济激励机制</u>（<strong><em>使作恶成本远高于作恶收益，实现链上不可信环境的可信治理</em></strong>）。显性经济激励为权益质押，Chainlink节点质押一定数量的LINK通证参与DON。Chainlink的权益质押与区块链上的权益质押有很大不同，一方面权益质押主要用来验证链下数据的真实有效性，而非达成区块链底层共识；另一方面，Chainlink的权益质押主要用于防止节点受贿发送欺诈数据，为此Chainlink提出超线性权益质押，即<u>攻击者需要提供远超节点质押的保证金，才能够有效攻击</u>。而隐性激励指未来收益机会，即只有服务质量高、声誉好的节点才能吸引潜在用户，获得未来收益机会。</p><p>Chainlink2.0白皮书将使用链下资源的智能合约称之为混合型智能合约，单单在链上运行的智能合约受限于链上资源的有限、昂贵和缓慢等制约仅能提供部分功能，而结合DON的混合型智能合约理论上可以获取链下无限的资源，并将高昂的链上计算成本转移到低廉的链下，因而可以提供完备的功能，同时继承智能合约去中心化、无需许可等优点。混合型智能合约优势之一在于让人清楚地了解该智能合约包含链下组件，并把链下组件作为智能合约的组成部分而不再是分割的两个领域。</p><p>Chainlink2.0白皮书以DON为基础，混合型智能合约为载体，向我们描绘未来预言机蓝图。欲要了解更多Chainlink2.0设计、实现细节，敬请关注即将发布的Chainlink 2.0中文版白皮书！</p><h3 id="chainlink的设计机制">Chainlink的设计机制</h3><p>Chainlink 的理想是做一个去中心化的预言机。</p><p>根据白皮书的介绍，Chainlink 通过使用 API将链上和链外联系起来。它通过获取链上资源（如以太坊、比特币和 Hyperledger等区块链），并通过 API将其连接到链下资源（如市场数据、银行支付、零售支付、后端系统、事件数据等）来实现链下数据与链上智能合约的交互。</p><figure><imgsrc="https://pic1.zhimg.com/80/v2-8295c870b7319a6e56044d07e9b0dd94_1440w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><ahref="https://zhuanlan.zhihu.com/p/113875183">Chainlink的理想与现实 -知乎 (zhihu.com)</a></p><p>每个参与智能合约的预言机都会搜集相关数据（如市场数据），将数据发送至网络中的其他预言机，按照指示将所有数据聚合至单一数据点，并经由统一的预言机一次性发送至链上的智能合约。</p><p>链下预言机治理其实也存在一个不可能三角问题，如何在确保链下数据客观、严谨的基础上，又能保证和链上世界接轨的处理效率，最主要的是，链下预言机的“管理者‘本身是安全、可信的。总之，链上区块链运转模型和链下预言机治理就像一个双星系统，二者互相影响又互相依赖。</p><p><ahref="https://blog.csdn.net/llslinliansheng/article/details/128057631">(56条消息)Chainlink——白皮书简析(whitepaperv2)_llsforest_llsForest的博客-CSDN博客</a></p><img src="/2023/03/19/%E3%80%90Chainlink%E3%80%91Chainlink%E7%9B%B8%E5%85%B3/attack.png" class="" title="attack"><p>数据是如何实现上链的：<ahref="https://blog.csdn.net/heyuekeji/article/details/107023324">(56条消息)深入浅出：一条数据是如何完成上链的_荷月科技的博客-CSDN博客</a></p><p>对哈希进行签名还可将发送者的身份和信息绑定，同时也可防止其他人冒充发送者，因此这样处理可保证信息的防篡改的同时认证发送者的身份，防止抵赖。</p><p><u>前不久，北京市金融工作局局长霍学文在一次演讲中曾指出，区块链中的“decentralized”特征的本意不是所谓的“去中心化”，准确地讲是“分散”的意思，把区块链简单地理解为“去中心化”，其实是翻译错误，是不准确的。</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】基于私链运行一个Chainlink预言机节点</title>
      <link href="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/"/>
      <url>/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="注意">注意</h2><p>官方文档：<ahref="https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node">Runninga Chainlink Node | Chainlink Documentation</a></p><ol type="1"><li>本教程和官方教程的区别在于，本教程<strong>基于自己搭建的Geth私有链</strong>而非Goerli测试网</li><li>建议先在本地创建账户，再创建json文件，然后去metamask添加importaccount，最后再在启动私链的命令中添加--unlock参数解锁账户，实现交易的打包。这一步，目的是为在Remix上部署LinkToken合约做准备。</li><li>在metamask上添加创建的账户是为后续在Remix上部署合约做准备</li><li>在Remix上部署LinkToken合约的目的是为后续给预言机节点转账做准备</li></ol><h2 id="用geth搭建私有链">用Geth搭建私有链</h2><p>下载Geth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ethereum</span><br></pre></td></tr></table></figure><p>随后创建如下的文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/myChain</span><br><span class="line">├── chainlink</span><br><span class="line">└── localChain</span><br><span class="line">    ├── node1</span><br></pre></td></tr></table></figure><p>输入如下命令创建账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo geth --datadir ./ account new</span><br></pre></td></tr></table></figure><p>可以通过两种方式配置创世区块：</p><ul><li>直接配置genesis.json文件</li><li>使用puppeth配置创世区块</li></ul><p>0xedd96278959aA8B27DdC14FD70ACb31f7e7beC2F</p><p>0xCDA9035668b149d18905349Fa8779073e433820C</p><p>如果要直接配置genesis.json文件，可参考如下写法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span>      <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x20000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x2fefd8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span>      <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000042&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mixhash&quot;</span>    <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;0x00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;18aCF602A4C1f4915709bA09A0bFd83A58656CA4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300000000000000000000&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;8c304567E5d337cB60301a998e430F056EF9F622&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;400000000000000000000&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>初始化。<strong>注意每次修改JSON文件后都必须初始化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth init --datadir data testchain.json</span><br></pre></td></tr></table></figure><p>在~/myChain/localChain/node1下启动私链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --gcmode &quot;archive&quot; --syncmode=full --networkid 4190 --http --http.addr 0.0.0.0 --http.port 6789 --http.corsdomain &quot;*&quot; --ws --port 30305 --allow-insecure-unlock --unlock edd96278959aA8B27DdC14FD70ACb31f7e7beC2F --keystore ./keystore console</span><br></pre></td></tr></table></figure><p>私链启动以后，就去Metamask添加网络。</p><p>Metamask具体可以看这篇：https://blog.csdn.net/llslinliansheng/article/details/123596009</p><p>私链开启挖矿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">miner.setEtherbase(&quot;edd96278959aa8b27ddc14fd70acb31f7e7bec2f&quot;)</span><br><span class="line">miner.start()</span><br></pre></td></tr></table></figure><h2 id="搭建chainlink预言机">搭建Chainlink预言机</h2><p>由于LinkToken.sol的Solidity代码需要在GitHub拉取，可以通过在主页按T键搜索LinkToken.sol文件，找到文件所在目录，并拉取其V0.4的所有文件。同时要修改import部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/ERC677Token.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StandardToken</span> <span class="keyword">as</span> linkStandardToken &#125; <span class="keyword">from</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/vendor/StandardToken.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LinkToken</span> is linkStandardToken, <span class="title class_">ERC677Token</span> &#123;</span><br><span class="line"></span><br><span class="line">  uint public constant totalSupply = <span class="number">10</span>**<span class="number">27</span>;</span><br><span class="line">  string public constant name = <span class="string">&quot;ChainLink Token&quot;</span>;</span><br><span class="line">  uint8 public constant decimals = <span class="number">18</span>;</span><br><span class="line">  string public constant symbol = <span class="string">&quot;LINK&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">LinkToken</span>(<span class="params"></span>)</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = totalSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address with additional data if the recipient is a contract.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _data The extra data to be passed to the receiving contract.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferAndCall</span>(<span class="params">address _to, uint _value, bytes _data</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferAndCall</span>(_to, _value, _data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transfer</span>(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _spender The address which will spend the funds.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value The amount of tokens to be spent.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address _spender, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_spender)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">approve</span>(_spender,  _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Transfer tokens from one address to another</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _from address The address which you want to send tokens from</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _to address The address which you want to transfer to</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value uint256 the amount of tokens to be transferred</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address _from, address _to, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferFrom</span>(_from, _to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MODIFIERS</span></span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">validRecipient</span>(<span class="params">address _recipient</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(_recipient != <span class="title function_">address</span>(<span class="number">0</span>) &amp;&amp; _recipient != <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后使用Remix部署合约，然而私链终端需要对交易进行打包，解锁账户，开始挖矿。</p><img src="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/geth_miner.png" class="" title="geth_miner"><p>安装PostgreSQL和docker，这里不细说。PostgreSQL的安装过程具体可以看这篇文章：<ahref="https://linux.cn/article-11480-1.html">技术|如何在 Ubuntu上安装和配置 PostgreSQL (linux.cn)</a>。</p><p>我使用的PostgreSQL版本和docker版本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">keikei@ubuntu:~$ psql --version</span><br><span class="line">psql (PostgreSQL) 12.14 (Ubuntu 12.14-0ubuntu0.20.04.1)</span><br><span class="line">keikei@ubuntu:~$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           23.0.1</span><br><span class="line"> API version:       1.42</span><br><span class="line"> Go version:        go1.19.5</span><br><span class="line"> Git commit:        a5ee5b1</span><br><span class="line"> Built:             Thu Feb  9 19:46:56 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line">permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>随后在~/myChain/chainlink/.chainlink下创建<code>.env</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ROOT=/chainlink</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line">ETH_CHAIN_ID=4190</span><br><span class="line">CHAINLINK_TLS_PORT=0</span><br><span class="line">LINK_CONTRACT_ADDRESS=0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span><br><span class="line">SECURE_COOKIES=false</span><br><span class="line">ALLOW_ORIGINS=*</span><br><span class="line">ETH_URL=ws://127.0.0.1:8546</span><br><span class="line">DATABASE_URL=postgresql://postgres:Likeqi5201314000@localhost:5432/chainlink?sslmode=disable</span><br><span class="line">DATABASE_TIMEOUT=0</span><br></pre></td></tr></table></figure><p>随后启动预言机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net host -u=root  -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink:1.11.0 local n</span><br></pre></td></tr></table></figure><p>在本地浏览器输入127.0.0.1:6688，打开Chainlink Operator</p><img src="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/chainlink_operator.png" class="" title="chainlink_operator"><p>至此，Chainlink分布式预言机节点已经搭建完毕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
