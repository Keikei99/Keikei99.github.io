<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/09/06/Learning%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/09/06/Learning%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PKU-区块链技术与应用</title>
      <link href="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="北大肖臻-区块链技术与应用">北大肖臻 区块链技术与应用</h1><h2 id="第一节-密码学基础">第一节 密码学基础</h2><p>crypto-currency 加密货币，加密货币实际上不加密</p><p>加密货币用到的密码学算法：<strong>哈希函数、签名</strong></p><p>哈希函数的三个特性：</p><ul><li>collision resistance/free <strong>抗哈希碰撞</strong>，碰撞客观存在，但没有高效的方法，能够人为构造哈希碰撞（无法证明，但可以用实践经验）</li></ul><p>MD5已经不安全了，可以人为构造哈希碰撞</p><ul><li>hiding，哈希函数是<strong>单向函数</strong></li></ul><p>两者合作实现digital commitment/equivalent of a sealed envelope（封起来的信封）</p><p>预测结果不能提前公开 H(result || nonce)</p><ul><li>puzzle friendly <strong>谜题友好性</strong></li></ul><p>找nonce，要求H(block header || nonce) &lt;= target，落在指定的范围之内，挖矿的过程没有捷径，只能一个个去试，工作量证明(Proof of work)</p><p>挖矿很难，但验证很容易 difficult to solve but easy to verify</p><p>BTC中用到的哈希函数：SHA-256（Secure Hash Algorithm - 256 bit）</p><p>比特币中的账户开户：创建一个公私钥对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>y</mi><mo separator="true">,</mo><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>k</mi><mi>e</mi><mi>y</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;public key, private key&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>，来自非对称加密体系<strong>a</strong>symmetric encryption algorithm</p><p>非对称加密中：</p><ul><li><p>发信息时加密用接受者的公钥，解密用接受者的私钥，加解密都是用同一个人的公钥和私钥，公钥公开，私钥保密。其中，公钥相当于银行账号，私钥相当于密码</p></li><li><p>签名用我的私钥，别人验证签名用的是我的公钥</p></li></ul><p>生成公私钥对的随机源要好a good source of randomness，签名时也要用好的随机源</p><p>比特币中一般是先取哈希后签名，此时要签名的对象就变成了256bit的二进制数。</p><h2 id="第二节-btc数据结构">第二节 BTC数据结构</h2><h3 id="blockchain-区块链">BlockChain 区块链</h3><p>普通结构体存储的是一个结构体在内存中的（起始）地址，哈希指针还需要保存该结构体的哈希值。</p><p>Blockchain is a linked list using hash pointers.</p><p>genesis block 创世区块</p><p>most recent block 最近的区块</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815150313400.png" class="" title="image-20240815150313400"><p>通过这样的数据结构可以实现<strong>防篡改记录</strong> tamper-evident log</p><p>这个数据结构的好处是只需要保存一个哈希值，就可以确保整个区块链的篡改感知</p><h3 id="merkle-tree-默克尔树">Merkle tree 默克尔树</h3><p>binary tree 二叉树</p><p>现用哈希指针代替了普通的指针，得到Merkle Tree。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815150654337.png" class="" title="image-20240815150654337"><p>根节点也可以取个哈希，叫作根哈希值root hash，用根哈希值就可以检测出树中任何部位的修改。<strong>底下的数据块是一个个的交易tx</strong></p><p>每个区块分为block header和block body，block header存放了由所有交易组成的merkle tree的根哈希值，而block body存放若干交易的具体信息，相当于交易的结构体数组</p><p>block header能够提供Merkle Proof，全节点提供路径上需要用到的哈希值，即可证明交易是被写入到了区块链中，也叫做Proof of membership或者Proof of inclusion，复杂度为<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.764ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3873.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(2596.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>如果要证明Proof of nonmembership，即证明交易不存在于区块链中，只能对叶节点进行遍历。如果能够能够对交易的哈希值进行排序，那么可以采用二分查找的方式，复杂度为<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.764ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3873.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(2596.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，也成为Sorted Merkle Tree</p><p>只要数据结构是无环的，都可以用哈希指针来代替普通指针。</p><h2 id="第三节-btc共识协议">第三节 BTC共识协议</h2><h3 id="介绍">介绍</h3><p>央行可以发行带有签名的100元货币和50元货币：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815152910979.png" class="" title="image-20240815152910979"><p>然而，这个数字货币本质上是文件，可以无限复制下去。Double Spending Attrack 双花攻击，是指一份钱花两次的攻击。</p><p>如果每个数字货币上都有个编号，央行的数据库要记录每个数字货币在谁手里，这个方案理论上可行，但太过于复杂。因此引入比特币，让广大群众共同维护这个账本。</p><p>交易包含输入和输出部分，输入要说明币的来源以及A的公钥，输出要说明收款人的公钥的哈希</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815153903915.png" class="" title="image-20240815153903915"><p>两种哈希指针，图中弯曲的指针用来验证币的来源。以铸币交易为例，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>i</mi><mi>n</mi><mo>→</mo><mi>A</mi><mo stretchy="false">(</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">CreateCoin \to A(10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>中，输出说明了A的公钥的哈希值，那么在下一笔交易中，就可以通过A的公钥去溯源币的来源。</p><p>钱包的地址是通过公钥推算出来的，具体过程如下：</p><ol><li>公钥 → SHA-256 → RIPEMD-160 → 公钥哈希</li><li>公钥哈希 + 网络前缀 → 双重SHA-256 → 校验和</li><li>公钥哈希 + 网络前缀 + 校验和 → Base58Check编码 → 钱包地址</li></ol><p><u>铸币交易中，输出是收款方的公钥的哈希，可以用作币来源的证明，此时如果有B的同伙B’冒名顶替A，发起B’-&gt;B(5)，那么B’的公钥哈希于A的公钥哈希对不上，验证不会通过，交易不会被写入区块链中</u>，这个过程是通过<strong>比特币脚本</strong>BTC Script进行</p><p>比特币包含了区块头和区块体，包含的内容如下表所示：</p><table><thead><tr><th>Block Header</th><th>Block Body</th></tr></thead><tbody><tr><td>version 比特币协议版本</td><td>transaction list 交易列表</td></tr><tr><td>hash of previous block header 前一个区块的哈希值（即哈希指针）</td><td>-</td></tr><tr><td>Merkle root hash 区块体中所有交易组成的merkle tree的根哈希值</td><td>-</td></tr><tr><td>target 挖矿难度目标阈值</td><td>-</td></tr><tr><td>nonce 随机数</td><td>-</td></tr></tbody></table><p>BTC中要解决的谜题puzzle：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(block header) \le target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span></p><p>对比比特币中的全节点和轻节点：</p><table><thead><tr><th>full （validating）node 全节点</th><th>light node 轻节点</th></tr></thead><tbody><tr><td>保存区块链中的所有信息</td><td>一般无法独立验证交易的合法性</td></tr><tr><td>负责区块链的构造和维护</td><td>只是利用区块链的信息进行一些查询</td></tr></tbody></table><p>账本的内容要取得分布式的共识 distributed consensus，比如distributed hash table要对key-value对进行共识。</p><p>FLP impossibility result：在一个异步系统（网络传输时延没有上限）里，哪怕一个节点是faulty的，也不能达成共识（悲观）</p><p>CAP Theorem：</p><ul><li>Consistency 一致性</li><li>Availability 可用性</li><li>Partition Tolerance 分区容错性</li></ul><p>三个性质中只能满足两个</p><h3 id="比特币中的共识协议-consensus-in-bitcoin">比特币中的共识协议 Consensus in BitCoin</h3><p>假设恶意节点是小部分，大部分都是好的节点，任何基于投票的共识机制，membership，如Hyperledger Fabric都不可行</p><p>女巫攻击sybil attrack，一直产生账户，账户量超过50%，就可以掌握投票权</p><p>比特币用算力投票，尝试各种nonce值（4 Bytes），如果某个节点找到了这个nonce，那么这个节点就有了记账权</p><p>合法的区块：区块中的交易都合法，但该区块仍然可能不被接受：<strong>最长合法链原则 longest valid chain</strong></p><p>分叉攻击 forking attack，通过在区块链中插入区块导致交易被回滚。假如两个节点同时获得记账权</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815162214042.png" class="" title="image-20240815162214042"><p>大家争夺记账权，希望让合法交易都写入区块链中。比特币设计了一个出块奖励block reward。拥有记账权的节点在打包交易时可以包含一个铸币交易coinbase transaction，唯一一个产生新币的途径。如果将区块链插入到链的中间，大部分诚实节点不会接受，因此会做无用功。</p><p>比特币中的共识是去中心化账本中的内容，只有获得记账权的节点才能往该账本写入交易，而只有通过计算puzzle才能获得记账权。因此hash rate越高的节点获得记账权的概率越大。</p><p>可以防范女巫攻击，因为无限产生账户不会让hash rate增加。比特币叫数字黄金，因此寻找nonce的过程相当于淘金，也就叫<strong>挖矿</strong>，争夺记账权的节点也叫作<strong>矿工miner</strong></p><h2 id="第四节-btc具体实现">第四节 BTC具体实现</h2><p>比特币是基于交易的账本模式 transaction-based ledger，无法直接知道每个账户上有多少钱，而可以通过交易记录间接推算。</p><p>BTC中的全节点需要在内存中维护一个UTXO的数据结构Unspent Transaction Output</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815164247871.png" class="" title="image-20240815164247871"><p>UTXO中的每个元素要给出产生<strong>这个输出交易的哈希值</strong>，以及是<strong>第几个</strong>输出，为了检测<strong>Double Spending</strong>，total inputs = total outputs</p><p>transaction fee，用来激励矿工打包交易</p><p>矿工收入=transaction fee+出块奖励</p><p>10分钟出一个区块，21万个区块后，记账奖励减半，故每过4年左右时间交易费减半，交易费会逐渐成为主要收入</p><p>ETH用的是account-based ledger，显式记录每个账户上的余额，不需要显示的说明币的来源</p><p>BTC中区块的数据结构：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815165955035.png" class="" title="image-20240815165955035"><p>区块头的数据结构：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815170109326.png" class="" title="image-20240815170109326"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815170148216.png" class="" title="image-20240815170148216"><p>如今挖矿难度越来越大，遍历nonce实际上已经不满足难度要求，现在可以将merkle root hash和time作为extra nonce来使用，而要改变merkle root hash，可以改变coinbase tx中的coinbase域来实现，里面可以写你的人生感想</p><p>交易的验证过程：将该交易的输入脚本和提供该币来源的输出脚本进行配对执行，如果顺利执行则说明交易合法</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815170820702.png" class="" title="image-20240815170820702"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815171120661.png" class="" title="image-20240815171120661"><p>对挖矿进行<strong>概率分析</strong></p><p>每次挖矿可以看作是一次伯努利试验 Bernoulli trail: a random experiment with binary outcome，典型抛硬币</p><p>多个伯努利试验构成了Bernoulli process: a sequence of independent Bernoulli trails，无记忆性memmoryless，做大量的试验，前面的实验结果对后面的实验没有关系</p><p>可以用泊松process来近似，出块时间服从指数分布exponential distribution</p><p>概率密度曲线：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815171608898.png" class="" title="image-20240815171608898"><p>progress free，过去做的工作都白做了，很无情，但恰恰是比特币公平性的保证</p><p>出快的比特币数量构成了一个几何序列geometric series</p><p>21w * 50 + 21w * 25 + 21w * 12.5 + …</p><p>= 21w * 50 * (1 + 0.5 + 0.25 + …)</p><p>= 21w * 50 * 2 = 2100w</p><p>即系统中所有比特币的总量，比特币的稀缺性是人为造成的，但挖矿的过程对比特币的安全性是至关重要的</p><p>BitCoin is secured by mining. 挖矿表面上没有实际意义，但对维护系统安全性至关重要。</p><p><strong>安全性分析</strong></p><p>能不能保证写入区块链的交易都是合法的？不能保证记账权落入诚实节点手里，也就是说恶意节点有可能也可以拿到记账权。</p><ol><li>能偷币吗？不能，因为不能伪造别人的签名</li><li>如果硬写交易呢？不能，因为诚实节点是不会接受这个交易的，而且拿到记账权的节点损失很大，既没有攻击成功，也白白损失了这笔出块奖励</li><li>能double spending吗？<img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815173222700.png" class="" title="image-20240815173222700">不能，可以通过等待N个区块来防范攻击，因为在等待了N个区块后，发生分叉攻击的可能性大大减小。也叫作多等几个确认confirmation，比特币中要求等<strong>6个区块</strong>才能确认合法，1个小时左右。</li></ol><p>区块链是不可篡改的账本irrevocable ledger，但这只是概率上的保证</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815173716449.png" class="" title="image-20240815173716449"><p>zero confirmation用的很普遍，因为诚实的节点不会接受双花的交易</p><ol start="4"><li><p>能否故意不包含某些合法的交易？可以，因为总有诚实节点会打包这些交易，可能是打包下一个区块，一个区块大小为1MB</p></li><li><p>selfish mining，自己挖了很多区块藏着，在后面一下子公布所有区块，将另一条分叉干掉？可能性很小，前提是有恶意的节点算力占据了全系统算力的很大一部分，才会发生这种攻击</p></li></ol><p>selfish mining有没有什么好处？减少了算力竞争，一次性拿N份出块奖励，但是也有很大的风险</p><h2 id="第五节-btc网络">第五节 BTC网络</h2><p>The BitCoin Network 工作原理</p><p>工作在应用层 application layer，运行比特币协议BitCoin Blockchain</p><p>网络层协议运行P2P Overlay Network，比特币运行的P2P网络与普通的P2P网络不同。普通的P2P网络中会有Super node或者Master node</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815180714217.png" class="" title="image-20240815180714217"><p>BTC设计的原则是：简单鲁棒而非高效</p><p>simple, robust, but not efficient</p><p>flooding，不考虑实际的网络结构</p><p>best effort 尽力而为，去中心化网络中会有很多延迟、节点恶意性的问题</p><h2 id="第六节-btc挖矿难度">第六节 BTC挖矿难度</h2><p>H(block header) &lt;= target，SHA-256，2^256，要求前面有多少个0，通俗来讲是这样</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi><mi mathvariant="normal">_</mi><mn>1</mn><mi mathvariant="normal">_</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">difficulty=\frac{difficulty\_1\_ target }{target}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.27488em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.39444em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6999999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord">1</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>target越大时，挖矿难度difficulty越小</p><p>出块时间太短会有问题，假设出块只需要1s，而传播需要几十s，那么分叉会成为常态，那就会出现二分叉、三分叉，甚至是十分叉，分叉越多，越会危害系统的安全性。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815182636583.png" class="" title="image-20240815182636583"><p>诚实节点的算力被分散，导致女巫攻击变得容易</p><p>ETH创建了新的共识协议ghost，将出块时间调整为15s。时间长度都需要稳定，不能无限减少下去。</p><p>对orphan block也有一些uncle reward</p><p>BTC中，每2016个区块后，约等于2周，就调整一次区块，调整公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>∗</mo><mfrac><mrow><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">target = target * \frac{actualTime}{expectedTime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>或者</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi><mo>∗</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow><mrow><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">difficulty = difficulty * \frac{expectedTime}{actualTime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="25.923ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 11458 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1541,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2007,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(2440,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2801,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3267,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3787,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(4491,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4836,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5714,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(6457.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7513.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(9735.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(10458,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">actualTime=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span> 最近2016个区块实际挖矿时间</p><p>实际代码中有4倍的限制，后面的比例因素大小在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[\frac{1}{4}, 4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>中</p><p>如果恶意矿工不调整响应的target，那么它的nbits域不对，诚实节点是不会接受的</p><p>比特币的这些参数可能就是自己想出来的，比较保守的采用，make sense罢了，<strong>不一定最优</strong></p><h2 id="第7节-btc挖矿">第7节 BTC挖矿</h2><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240815184437143.png" class="" title="image-20240815184437143"><p>缺省=默认=by default</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816175747550.png" class="" title="image-20240816175747550"><p>比特币网络中大部分都是轻节点</p><p>全节点如果监听到有别的矿工挖到区块，此时应该停止已有的挖矿，然后在本地重新组装候选区块，重头开始挖。不可惜，因为memoryless和progress free，前后挖矿的概率一样</p><p>BTC的安全性由<strong>密码学</strong>和<strong>共识机制</strong>保障</p><h3 id="btc中的挖矿设备">BTC中的挖矿设备</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>P</mi><mi>U</mi><mo>→</mo><mi>G</mi><mi>P</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">CPU\to GPU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span>用于大规模并行计算，而浮点数运算是闲置的。现在用ASIC（Application Specific Integration Circuit）芯片挖矿</p><p>一个ASIC只对应一个mining puzzle，除非新币为了吸引挖矿，就会采用同一个mining puzzle，叫merge mining</p><p>有些加密货币：Alternative mining puzzle，能做到ASIC resistance，抗ASIC芯片，让通用计算机也能够挖矿</p><p>大型矿池，一个全节点驱动很多矿机</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816181507960.png" class="" title="image-20240816181507960"><p>全节点的其他功能由矿主实现，计算哈希值的操作由矿工实现</p><p>原来的的挖矿难度很难，但矿主可以通过降低挖矿难度（增大target）给矿工分配任务，也就是一个share，当矿工挖矿得到了一个almost valid block提交给矿主时，矿主将矿工提交的share数目作为其工作量证明，在真正挖到矿时进行分配</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816182533448.png" class="" title="image-20240816182533448"><p>假如矿池达到了51%的算力，具体可以发起哪些攻击？</p><ul><li>分叉攻击，使得大额交易回滚</li><li>Boycott，估计不打包A的交易，只要与A有关的交易都不让上链。与forking attack不同的是，boycott不需要等待6个确认区块</li><li>不可能盗币</li></ul><p>矿池可能带来的潜在危害 on demand computing/mining，需要用到的时候可以随时召唤</p><h2 id="第八节-比特币脚本">第八节 比特币脚本**</h2><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816183556421.png" class="" title="image-20240816183556421"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816183736271.png" class="" title="image-20240816183736271"><p>locktime：等待多久时间后写入区块链</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816184006998.png" class="" title="image-20240816184006998"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816184235203.png" class="" title="image-20240816184235203"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816184357895.png" class="" title="image-20240816184357895"><p>Alternative Coin</p><p>比特币脚本语言，是基于栈的语言</p><h2 id="第九节-btc分叉">第九节 BTC分叉</h2><ul><li>state fork 意见不一致<ul><li>forking attack，也称deliberate fork 故意的分叉</li></ul></li><li>protocol fork 协议不一致<ul><li>hard fork 硬分叉</li><li>soft fork 软分叉</li></ul></li></ul><h3 id="hard-fork-硬分叉">hard fork 硬分叉</h3><p>block size limit区块大小限制：1M-&gt;4M</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816191817072.png" class="" title="image-20240816191817072"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816192117282.png" class="" title="image-20240816192117282"><p>只要旧节点不肯更新软件，那么分叉一直存 在</p><h3 id="soft-fork-软分叉">soft fork 软分叉</h3><p>block size limit区块大小限制：1M-&gt;0.5M</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816193216532.png" class="" title="image-20240816193216532"><p>旧节点会生活的比较抑郁，因为挖出来的区块都白挖了。系统不会出现永久性的分叉。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816193444498.png" class="" title="image-20240816193444498"><p>这种特性会促使旧节点赶紧更新，保证自己的收益。</p><p>软分叉的例子：</p><ul><li>给coinbase域赋予一些新的规则。实际上coinbase域前8Byte可以用作extra nonce</li><li>有人提出可以存放UTXO组织成Merkle Proof的根哈希值，也就是各个全节点记录的账本哈希，来用于轻节点对自己账户上的证明。在这种情况下，旧节点认新节点，但新节点不认旧节点</li><li>BTC中一个著名的软分叉：P2SH (Pay to Script Hash)</li></ul><p>总结：</p><ul><li>soft fork：只要系统有半数以上节点，系统不会出现永久性分叉</li><li>hard fork：必须所有节点都更新才不会出现分叉，否则一定出现分叉</li></ul><h2 id="第十节-课堂问答">第十节 课堂问答</h2><ol><li>转账如果接收者不在线怎么办？</li></ol><p>不需要接受者在线，在不在线没有关系</p><ol start="2"><li>假设全节点接受到转账交易，有没有可能这个收款地址是全节点以前都没有听说过的？</li></ol><p>有可能，比特币创建时不需要通知其他人</p><ol start="3"><li>如果你账户的私钥丢失了，该怎么办？</li></ol><p>凉拌，账户里的钱就永远取不出来了。有些加密货币的交易所，是中心化的交易机构，类似银行开户也需要身份验证，私钥是由交易所来保管的</p><p>但是交易所目前缺乏监管，会存在黑客攻击的问题，因此交易所也没那么安全</p><p>Mt. Gox，被黑客攻击，破产，也有可能卷款跑路</p><ol start="4"><li>如果账户的私钥泄露了，该怎么办？</li></ol><p>赶紧把账户的钱转到另一个新的安全账户上</p><ol start="5"><li>如果转账时写错了地址怎么办</li></ol><p>没办法，没有办法取消已经发布的交易</p><ol start="6"><li><strong>Proof of Return中RETURN后面的语句根本无法执行，为什么会写在区块链里呢？</strong></li></ol><p>验证的过程是将交易的输入和币的来源交易的输出拼在一起执行，如果没有抛出错误则认为交易合法。</p><p>OP_RETURN语句是写在当前交易的输出脚本中的，因此在验证交易合法性的时候OP_RETURN是不会被执行的。而如果后面有人想花这笔钱时才会执行到这条语句，这个时候才会抛出错误。</p><ol start="7"><li>矿工能不能偷nonce？</li></ol><p>不能。coinbase tx域。如果偷nonce的话，就得修改coinbase tx改成自己，就会改变merkle root hash，最终导致nonce无效</p><ol start="8"><li>事先怎么知道哪个矿工会挖到矿</li></ol><p>事先不需要知道哪个旷工会得到这个交易费 total inputs &gt; total outputs，那么差值就可以作为给矿工的交易费</p><h2 id="第十一节-btc匿名性">第十一节 BTC匿名性</h2><p>Bitcoin and anonymity/privacy</p><p>psseudonymity</p><p>unnamed lake 未名湖</p><p>普通银行的匿名性比比特币要好，我要查某个账户上有多少钱，银行的账本是保密的，但比特币的账本是公开的</p><p>Inputs: addr1(4), addr2(5)</p><p>Outputs: addr3(6), addr4(3)</p><p>故找零的地址是addr4</p><p>有可能破坏匿名性的方法：</p><ul><li>一个人生成了很多个账户，但账户很有可能被关联起来</li><li>与社会真实身份会产生关联</li><li>实体世界中，用比特币支付时。但这是个bad idea</li></ul><p>比特币一做交易就会与实体世界发生联系，直接就会被抓</p><p>比特币中的匿名性没有我们想象中的好</p><p>hide your identity from whom?</p><p>使用比特币如何尽可能的提高匿名性？在网络层在学术界已经有很好的解决方法，洋葱路由TOR，在Application层有很多跳</p><p>提高匿名性的做法：coin mixing，让人分不清楚币是从哪来的，然而coin mixing也存在捐款跑路的风险</p><p>在线钱包或交易所本身有coin mixing的性质</p><p>实际上区块链的不可篡改性对隐私保护并非是好事，因为一旦暴露那么就无力回天</p><h3 id="零知识证明">零知识证明</h3><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816214855691.png" class="" title="image-20240816214855691"><p>例子：我要证明这个账户是我的，即我有这个账户的私钥，但我又不想把私钥告诉你</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816215022752.png" class="" title="image-20240816215022752"><ol><li>加密函数不会出现碰撞，说明如果E(x)=E(y)，那么x一定等于y</li><li>hiding</li><li>同态运算</li></ol><p>例子  <img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816215442781.png" class="" title="image-20240816215442781"></p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816215453422.png" class="" title="image-20240816215453422"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816220003557.png" class="" title="image-20240816220003557"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240816220116066.png" class="" title="image-20240816220116066"><p>专门为匿名性设计的加密货币，但是在性能上有损失、不能提供百分百的匿名，导致不是很主流</p><h2 id="第十二节-btc思考">第十二节 BTC思考</h2><ol><li>区块链中的哈希指针，只有哈希没有指针在实际系统当中，区块用&lt;key,value&gt;存储在levelDB中</li><li>对于多个人的共享账号，不要用截断私钥的方法（区块恋），而是使用多重签名（MULTISIG）</li><li>为什么比特币系统能够绕过分布式共识中的那些不可能结论？比特币并没有达到真正意义上的共识，同时很多意义下的不可能理论在现实中是有可能的（模型的参数改一改）</li></ol><h2 id="第十三节-eth概述">第十三节 ETH概述</h2><p>memory hard mining puzzle, ASIC resistance 抗ASIC芯片</p><p>proof of work -&gt; proof of stake 权益证明</p><p>smart contract 智能合约</p><p>BitCoin: decentralized currency</p><p>Ethereum: decentralized contract</p><p>Satoshi Wei</p><p>现实生活中通过司法手段进行合约，我们希望用以代码形式实现这样的合约</p><p>与法币相比，去中心化的货币有什么好处，有什么应用场景？跨过转账</p><p>费时费力的事情</p><p>技术手段保证合同的参与方一开始就不可能违约，区块链的不可篡改性保证没人能改代码。</p><h2 id="第十四节-eth账户">第十四节 ETH账户</h2><p>A-&gt;B(10 BTC)</p><p>比特币的模式没有显式的维护账本</p><p>ETH是account-based ledger，显式地维护了一个账本，与人们平时的使用习惯相符</p><p>比特币面临的是double spending attack的威胁，但ETH对dsa有天然的防御作用</p><p>replay attack 重放攻击：A-&gt;B(10ETH)，收钱的人在收到钱后，重新再广播一次</p><p>ETH中增加一个nonce域，别人改不了</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240817185704254.png" class="" title="image-20240817185704254"><p>nonce一开始都是0，全节点都会维护这个账户的nonce，每发生一次都+1。如果有人想重放攻击，那么nonce会对不上</p><p>ETH中有两类账户：</p><p>external owned acctount 公私钥对控制，balance，nonce（计数器）</p><p>smart contract account 不能主动发起一个交易，所有交易只能由外部账户发起 balance nonce code storage</p><p>为什么要设计这样新的模型？以太坊要支持的是智能合约，比特币中合同的执行会有一些麻烦</p><p>金融衍生品financial derivative</p><h2 id="第十五节-eth状态树">第十五节 ETH状态树</h2><p>addr -&gt; state 160bits，40位16进制数，这是一个key-value pair</p><p>Q：能不能用哈希表来存储这些pair？不考虑哈希碰撞时，查询和更新都是常数级别的复杂度</p><p>如果使用哈希表的话，要提供Merkle Proof怎么弄，比如证明账户余额，将所有账户的状态组织成一颗merkle tree？<strong>代价太大</strong>，因为如果每次发布一个新区块后，哈希表中只有很小一部分的账户会发生变化，大多数账户的状态是不变的，重新组织merkle tree的计算代价很大</p><p>比特币中每出一个区块也要构建Merkle tree，但比特币中是将区块中的<strong>交易</strong>组织成merkle tree，merkle tree root hash只构建一次，构建完是不会再改的。且区块中大概也就4000个交易，如果以太坊将所有的以太坊账户构建成Merkle tree，那么账户的数目比比特币交易数目<strong>高出很多个数量级</strong></p><p>Merkle tree除了提供Merkle Proof之外，还有一个很重要的功能：<strong>维护全节点之间状态的一致性</strong></p><p>Q：如果只使用Merkle tree呢，将所有账户组织成一颗merkle tree，要改也直接从merkle tree中改，是否可行？</p><p>merkle tree没有提供高效的查找和更新的方法。同时，还有一个问题，merkle tree要不要排序？如果不排序的话（不规定账户出现的顺序），那么每个全节点构建出来的的merkle tree root hash是唯一的。</p><p>Q：比特币当中不也不排序吗，为什么比特币中就没有这个问题？</p><p>比特币中各个全节点监听到的交易顺序也是不同的，但最终的记账权只掌握在一个矿工的手里，具体的tx list的顺序也是由这个获得记账权的矿工决定的，所以不需要排序。</p><p>Q：那为什么ETH中不能这么干？</p><p>因为如果要取得共识，那么全节点就必须把所有的账户状态都发布出去，这样是不可行的。</p><p>综上，不排序的merkle tree是会有问题的。</p><p>Q：那我使用Sorted Merkle Tree可以吗？</p><p>也会有问题，如果新增一个账户怎么办，在叶节点的插入位置很可能是插入在中间的，此时插入的复杂度会很高，因为有大半棵树需要重构，此时用哈希表反而更方便。删除代价也大（其实可以不删）。ETH中没有显式删除账户的方法。</p><p>ETH中采用的数据结构是Merkle Patricia Tree(MPT)，，在此之前，先讲Trie</p><p>Trie字典树 re<u><strong>trie</strong></u>val，有几个单词放在一起排成字典树：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818152152701.png" class="" title="image-20240818152152701"><p>这种数据结构有几个很明显的特点：</p><ul><li><strong>每个节点的分支数目取决于Key的取值范围</strong>，此例中，每个节点的分支数目最多是26+1（结束标志位）。ETH中，branching factor 0~f，所以是17</li><li><strong>Trie的查找效率取决于Key的长度</strong>。此例中单词的长度一致，但ETH中账户的地址是定长的，都是40位的十六进制数</li><li>Trie中是不会出现碰撞的，只要地址不一样，一定能够映射到两个不同的分支</li><li>Merkle Tree不排序的话，插入元素的顺序不同，得到的树就不同。<strong>但Trie中不同的插入顺序能够得到相同的树。</strong></li><li>更新操作的局部性很重要。Trie中只需要访问一个分支，不需要遍历整棵树。因此Trie中更新操作的局部性很好</li></ul><p>然而Trie中也有一些缺点：</p><ul><li>存储有点浪费，合并节点可以减少存储开销，提升查找效率，因此引出<strong>Patricia tree 压缩前缀树</strong></li></ul><p>对原树进行路径压缩：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240817201526931.png" class="" title="image-20240817201526931"><p>因此树高变小，访问内存的次数变少。<strong>但是</strong>如果此时新添加一个单词，原来的压缩路径需要重新扩展开来，比如添加geometry</p><p>路径压缩在什么情况下比较好：键值分布比较稀疏时，Patricial tree效率高</p><p>比如几个长英文单词：</p><p>misunderstanding、discentralization、disintermediation（去中介化，区块链的一个应用场景，去掉中间商，没有中间商赚差价）。如果将这三个单词插入trie中：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818153407743.png" class="" title="image-20240818153407743"><p>如果用Patricia Tree，效果较好：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818153437927.png" class="" title="image-20240818153437927"><p>Q：我们这个应用中，键值是否稀疏？非常稀疏，ETH中有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>160</mn></msup></mrow><annotation encoding="application/x-tex">2^{160}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>的地址空间。为什么搞那么长的账户？让地址足够长，分布足够稀疏，这是一个去中心化系统防止账户冲突的唯一办法。</p><p>MPT：Merkle Patricia Tree，MPT与PT的区别是：<strong>用哈希指针替代普通指针</strong>，因此也可以计算得到根哈希值，写在Block header中。ETH中有三个根哈希值。</p><p>作用：</p><ul><li>不可篡改性；</li><li>Merkle Proof，能证明你的账户上的余额。全节点把账户的路径发给轻节点，轻节点就可以验证账户里有多少钱；</li><li>能不能证明某个账户是不存在的？直白的说，在这个MPT中能不能证明某个Key-value Pair是不存在的？可以。如果存在就能找到这个路径分支，把这个路径作为Merkle Proof发出去，不存在就找不到这个路径。因此可以证明不存在。</li></ul><p>ETH中用的还不是原生的MPT，而是使用修改版的MPT（Modified MPT）</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240817202659617.png" class="" title="image-20240817202659617"><p>如果出现了路径压缩，就会出现Extension Node，nibble就是十六进制数的意思，如果出现分支，就会出现Branch Node</p><p>中间Branch Node中7这个节点的值存的是下面那个Extension Node的哈希值。</p><p>在ETH中，新发布的区块状态树中有一些节点的状态要发生改变，但这种状态的更新不是在原地改的，而是新建一些分支，原来的状态是保留下来的</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818154734291.png" class="" title="image-20240818154734291"><p>合约账户的Storage也是用状态树的形式存储下来的，维护的是变量到变量取值的一个映射。因此ETH中的这个MPT是一个大的MPT包含了很多小的MPT，每个合约账户的存储都是一颗小的MPT。</p><p>所以系统中的每个全节点需要维护的不是一颗MPT，而是每次出现一个区块都要新建一个MPT，大部分节点是共享的，少部分需要新建分支。</p><p>Q：为什么要保留历史状态，而不在原地直接改了？</p><p>ETH中出现分叉是常态，两个分叉会有一个胜出，那下面那个orphan block只能回滚roll back，退回到上一个区块的状态。即有时候我们需要退回到发生交易的前一个状态。实现回滚只能是保留历史状态，因为这些交易有可能要undo。</p><p>比特币中的交易类型比较简单，可以通过简单的推算逆推出要回滚的状态。而ETH中支持了智能合约，Solidity是<strong>图灵完备</strong>的，理论上说可以实现很复杂的功能。因此智能合约执行完后推算出前面的状态是非常困难的。因此要实现回滚，只能保存历史状态。</p><blockquote><p>图灵完备是指在<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%AE%A1%E7%AE%97%E6%80%A7%E7%90%86%E8%AE%BA/2125738?fromModule=lemma_inlink">可计算性理论</a>里，如果一系列操作数据的规则（如<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86/238130?fromModule=lemma_inlink">指令集</a>、<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131?fromModule=lemma_inlink">编程语言</a>、<a href="https://baike.baidu.com/item/%E7%BB%86%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/2765689?fromModule=lemma_inlink">细胞自动机</a>）按照一定的顺序，可以计算出结果。</p><p>通俗来讲：<strong>图灵完备即可以解决所有可计算的问题。</strong></p></blockquote><p>以太坊中的数据结构：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818160251342.png" class="" title="image-20240818160251342"><p>区块块头的哈希值</p><p>叔叔区块的哈希值，和父区块不是同一个辈份的</p><p>挖出区块的矿工地址</p><p>三棵树的根哈希 状态数、交易树和收据树</p><p>boolm滤波器：提供高效的符合某种条件的交易的执行结果</p><p>挖矿难度</p><p>与Gas有关</p><p>Time区块大致的产生时间</p><p>Nonce和MixDigest与挖矿相关，MixDigest是将Nonce经过一些计算得到的</p><p>区块的结构：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818160417403.png" class="" title="image-20240818160417403"><ul><li>指向block header的指针</li><li>指向叔父区块的指针，是个数组</li><li>交易列表</li></ul><p>真正在网上发布的就是这些信息，即前三个属性：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818160443623.png" class="" title="image-20240818160443623"><p>(key, value) Pair中的value是如何存储在状态树中的呢？通过RLP（Recursive Length Prefix）序列化编码，特点是简单</p><p>Protocol buffer，简称protobuf，很常用的序列化的库</p><p>RLP是极简主义，只支持一种类型：Nested Array of Bytes，字节数组，可以嵌套。ETH中的所有数据类型都归结于NAB，难的都不做，都推给应用层做</p><blockquote><p><em>序列化是将对象转换为字节序列,便于存储或传输,反序列化则是恢复对象的过程</em></p><p><a href="https://www.jianshu.com/p/cf10c4503110">https://www.jianshu.com/p/cf10c4503110</a></p><p>在以太坊中，采用了一种名为Recursive Length Prefix(RLP)的方法对交易、账号、合约等基础的数据结构进行序列化处理，从而实现对链上数据的网络传输和持久化存储。</p><p>和其他的序列化协议不同，RLP只支持两种数据类型：<br>1）byte数组，可以是二进制数组，当然也可以是字符串；<br>2）byte数组的数组，也就是列表。并支持列表内的嵌套。</p></blockquote><h2 id="第十六节-eth交易树和收据树">第十六节 ETH交易树和收据树</h2><p>交易树和比特币类似。</p><p>每个交易执行完毕后会形成一个收据，记录这个交易的相关信息。两个树中的节点一一对应。用于快速查询一些执行的结果。</p><p>交易树和收据树都是MPT。MPT的一个好处是支持查找操作</p><p>交易树和收据树组织交易，而状态树组织系统中的账户状态。相比之下，状态树需要共享节点，而交易树和收据树是独立的，不需要共享节点。</p><p>交易树和收据树都可以提供Merkle Proof。ETH支持更加复杂的查询操作。比如想找到过去10天与某个智能合约有关的交易，应该怎么查：</p><ol><li>把过去10天产生的区块的所有交易列表全都扫描一遍，复杂度很高</li><li>ETH中引入了<strong>Bloom Filter布隆过滤器</strong>这个数据结构。能够查找某个元素是否在比较大的集合当中。</li></ol><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818163724791.png" class="" title="image-20240818163724791"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818163902135.png" class="" title="image-20240818163902135"><p>会出现false positive，可能出现误报，但一定不会漏报</p><p>然而Bloom Filter不支持删除操作</p><p>直接查Bloom Filter去过滤掉很多不相关的区块</p><p>ETH的运行过程可以理解为交易驱动的状态机 transaction-driven state machine</p><p>状态1-&gt;交易-&gt;状态2</p><p>而比特币可以理解为额交易驱动的状态机，比特币状态机中的状态是UTXO。对一个给定的状态，一组确定性的交易，要执行确定性的状态转移</p><p>Q：有人在ETH中发起一笔交易，这个收款人的地址是否有可能从来没有听说过？</p><p>有可能。此时全节点需要在状态树中新插入一个节点</p><p>Q：状态树需要包含系统中所有账户的状态，无论账户是否参与了系统中的交易。是否能将状态树改一改，改成和交易树一样，只包含与交易相关的账户的状态？</p><p>不能。每个区块没有一个完整的状态树，这样查找某个账户的状态就不方便了，如果实在要查找就必须遍历整个区块链。还有一个更大的问题：</p><p>比如A-&gt;B(10ETH)，全节点必须修改A和B的状态（比如A的余额-10，B的余额+10），**那么就需要在状态树中查找B。**假如B是个刚创建的账户，全节点发现状态树中没有B这个节点，只能从头扫到创世区块，结果发现还没有。这种方法是低效的</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818165723271.png" class="" title="image-20240818165723271"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818165731168.png" class="" title="image-20240818165731168"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818165848902.png" class="" title="image-20240818165848902"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818165859967.png" class="" title="image-20240818165859967"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170548238.png" class="" title="image-20240818170548238"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170558484.png" class="" title="image-20240818170558484"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170621141.png" class="" title="image-20240818170621141"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170646859.png" class="" title="image-20240818170646859"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170723980.png" class="" title="image-20240818170723980"><p>&amp; 2047实际上是对2048取余</p><p>查询bloomFilter中是否存在我们感兴趣的topic：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170848950.png" class="" title="image-20240818170848950"><h2 id="第十七节-eth-ghost协议">第十七节 ETH-GHOST协议</h2><p>GHOST- Greedy Heaviest Observed Subtree</p><p>15s的出块时间，临时性的分叉会变成常态。BTC中的共识协议认为，最长合法链上的区块是有效的，其他链上的区块无效</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818171708552.png" class="" title="image-20240818171708552"><p>比特币中出现临时性分叉的情况比较少，但ETH中出现分叉是常态，矿工很大可能白挖，对个体矿工不公平</p><p>什么是公平？算力比例和收益比例想等才算公平。如果不匹配，比如收益多了，那就不公平</p><p>大型矿池的出现导致mining centralization，centralization bias</p><p>ETH采用了基于Ghost协议的共识机制，进行了一些修改，核心思想：对失效的orphan block区块给予一些安慰奖励，ETH给它一个好听的名字：uncle block</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818172724666.png" class="" title="image-20240818172724666"><p>一个叔父区块最多包含两个叔父区块。</p><p>有利于鼓励系统中出现出现分叉后，及时合并。</p><p>Q：这是最初的版本，如果这样设计，有什么缺陷？</p><ul><li>uncle block只能出现两个，出现第三个的叔叔就不乐意了</li><li>挖出第五个区块的前提是，知道了另外两个叔父区块的存在，此时可以包含进来。如果来不及包含叔父，那叔父就真的没有奖励了。</li><li>如果矿工比较自私的话，会不包含叔父区块。自身损失比较小，对另一方损失比较大。有的矿池就会故意这么做。</li></ul><p>协议改一改：**将叔父的定义进行拓展。**在最长合法链延伸的过程中，orphan block依旧可以作为叔父区块，就算这个区块不包含进去，后面的区块也会包含。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818174837337.png" class="" title="image-20240818174837337"><p>但是不能多少代都是叔父，所以ETH中有个规定，N代以内的叔父可以包含在unclehash中，越遥远的辈份拿到的安慰奖励越少</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818175243010.png" class="" title="image-20240818175243010"><p>再往前，不叔父，要求7代以内有共同的祖先。At most seven generation。这么设计的原因：</p><ul><li>如果不限制叔父辈份，那么实现起来，全节点要维护的状态就太多了</li><li>出块奖励逐渐递减，有利于鼓励出块时尽早合并区块（挖出叔叔区块的矿工会抓紧时间mining，尽早包含自己的orphan block）</li></ul><p>设计这个协议的目的是为了解决系统出现的临时性分叉，属于state fork</p><p>BTC中发布一个区块包含两个奖励，block reward（静态奖励）和tx fee（动态奖励）</p><p>ETH中也有这个奖励，tx fee称gas fee，执行只能合约可以得到gas fee，叔父区块是得不到gas fee的</p><p>和BTC类似，gas fee只占block reward的很小一部分</p><p>**ETH中没有要求每隔多少个区块出块奖励减半。**ETH执行智能合约是需要消耗Gas的，发布智能合约要付出Gas fee，负责执行智能合约的那个矿工可以得到Gas fee</p><p>因此ETH和BTC的设计理念不同。</p><p>Q：把叔父区块包含进来的时候，是否需要执行叔父区块的交易？</p><p>不需要执行。最长合法链与叔父块中的交易可能是有冲突的，可能会导致double spending，叔父区块中的交易本身可能不非法，但是如果都执行的话，就可能变得非法。</p><p><strong>ETH只在最长合法链上执行</strong>。最长合法链需要包含叔父区块时，需要检查叔父区块的合法性（符合挖矿难度要求），至于叔父区块里的交易是否合法，不需要检查。</p><p>如果有人发起的交易被包含到叔父区块了，此时叔父区块无效，那么交易也会被包含到后面的区块当中，交易总会被执行的。</p><p>如果是这种情况怎么办：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818182306271.png" class="" title="image-20240818182306271"><p>如果这条分叉链上的区块都给奖励，那么forking attack分叉攻击就变得太便宜了，那么人人都会搞分叉攻击，因为两者都能得到收益。</p><p>因此ETH规定，只有<strong>分叉的第一个区块</strong>可以得到uncle reward，后面的区块<strong>都不能得到奖励</strong></p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818183255664.png" class="" title="image-20240818183255664"><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi>B</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>−</mo><mi>U</mi><mi>n</mi><mi>c</mi><mi>l</mi><mi>e</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">d = Block Height - UncleNumber</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p><p>实际系统中大部分的区块都得到了合并。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818183807188.png" class="" title="image-20240818183807188"><h2 id="第十八节-eth挖矿算法">第十八节 ETH挖矿算法</h2><p>Blockchain is secured by mining.</p><p>bug bounty</p><p>bounty hunter 赏金猎人</p><p>one cpu, one vote</p><p>ASIC resistance，设计memory hard mining puzzle，设计的puzzle应该是普通计算机能干的事情</p><p>早期的例子：LiteCoin，基于Scrypt的puzzle，开设一个很大的数组，有一个seed，依次取哈希</p><p>有些矿工可以：数组只保留奇数或偶数位置的元素，需要的内存可以少一半，time-memory trade off 用时间换空间</p><p>然而，这样的puzzle不仅对矿工memory hard，也对轻节点memory hard</p><p>早期的宣传，对于聚集人气来说是很重要的。</p><p>LTC的出块速度是两分半，puzzle不同，除此之外都与BTC一样</p><p>16M Cache, 1G dataset DAG</p><p>轻节点只需要保存Cache，而全节点需要保存DAG</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818202128704.png" class="" title="image-20240818202128704"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818202413970.png" class="" title="image-20240818202413970"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818202521633.png" class="" title="image-20240818202521633"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818203003024.png" class="" title="image-20240818203003024"><p>ETH挖矿主要是以GPU矿机为主，使用的挖矿算法是ethash，挖矿要用1G内存</p><p>PoW -&gt; PoS (Proof of Stake)，权益证明不挖矿，类似持股投票</p><p>预挖矿 pre-mining，留给ETH开发人员一些币</p><p>pre-sale类似众筹，将来加密货币成功后，也能拿很大一笔钱</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818203828771.png" class="" title="image-20240818203828771"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818203902370.png" class="" title="image-20240818203902370"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818203912993.png" class="" title="image-20240818203912993"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818203948008.png" class="" title="image-20240818203948008"><p>但有人认为通用计算机挖矿是不安全的，因为发动攻击的成本大幅度下降，ASIC矿机一统天下才是最安全的。</p><h2 id="第十九节-eth难度调整算法">第十九节 ETH难度调整算法</h2>  <img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818231119632.png" class="" title="image-20240818231119632"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818231456478.png" class="" title="image-20240818231456478"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818231853061.png" class="" title="image-20240818231853061"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818232028344.png" class="" title="image-20240818232028344"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818232311964.png" class="" title="image-20240818232311964"><p>以太坊决定回调难度炸弹，为权益证明的开发争取时间</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818232437822.png" class="" title="image-20240818232437822"><p>BIP：BitCoin Improvement Proposal</p><p>因为挖矿容易了，出块奖励要相应减少一些</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818232611993.png" class="" title="image-20240818232611993"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818232823810.png" class="" title="image-20240818232823810"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818233002583.png" class="" title="image-20240818233002583"><p>以太坊的实际统计情况</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818233149337.png" class="" title="image-20240818233149337"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818233253150.png" class="" title="image-20240818233253150"><p>出块时间出现大幅度增长</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818233408867.png" class="" title="image-20240818233408867"><p>链的总难度，最长合法链在ETH中是最难合法链</p><h2 id="第二十节-eth权益证明">第二十节 ETH权益证明</h2><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819001702549.png" class="" title="image-20240819001702549"><p>y轴：TWh = Terawatt hours 10^12</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819001747622.png" class="" title="image-20240819001747622"><p>一个交易要花一千度电，比特币的Pow机制十分耗电</p><p>ETH：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819120532840.png" class="" title="image-20240819120532840"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819120544975.png" class="" title="image-20240819120544975"><p>ETH与BTC相比，已经少了很多了。从直觉来讲，ETH包含了对智能合约调用的支持，应该更复杂，耗电更多才对。但是ETH中15s出一个区块， 而BTC要10min，因此ETH挖矿的时间短，耗电少。</p><p>但ETH处理一个交易的能耗依旧比信用卡公私高的多，不在一个数量级上</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819120850053.png" class="" title="image-20240819120850053"><p>矿工挖矿：为了取得收益</p><p>为什么给矿工收益：为了激励矿工参与区块链的维护</p><p>矿工挖矿的过程：找一大笔设备，买现成的矿机设备，收益由算力所占的比例决定，而算力由硬件设备的数量决定，设备数量也由投入的资金决定的。也就是拼钱决定的，谁的钱多，收益就高</p><p>那不如直接拼钱？这就是pos的基本思想，也叫作virtual mining</p><p>优点：</p><ul><li>省去了挖矿的过程，减少了温室气体的排放</li></ul><p>AltCoin Infanticide 将AltCoin扼杀在摇篮里</p><p>在POS共识的区块链系统当中，想要发起攻击，只能是花钱大量的购入这个币，权益证明维护安全的过程是一个闭环</p><p>pos与pow并非互斥，越有钱那么挖矿的难度越小</p><p>Proof of Deposit 通过质押一定的币，减少挖矿难度</p><p>早期基于pos共识机制遇到的问题：两头下注的问题</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819122446991.png" class="" title="image-20240819122446991"><p>下面那条链也有可能成为最长合法链。如果用pow那么不能两头挖，因为算力会分散；但用pos的话可以两遍都下注，如果上面的链成为最长合法链，那么下面那条链锁定的币是不会受影响的，也称nothing at stake</p><p>ETH中采用的权益证明采用Casper the Friendly Finality Gadget（FFG）</p><p>ETH中引入了Validator验证者，投入一定数量的ETH作为保证金，指责是推动系统达成共识，决定哪条链是最长合法链，投票的权重取决于保证金的数目大小</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819123605187.png" class="" title="image-20240819123605187"><p>每50个区块就是一个epoch</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819124056041.png" class="" title="image-20240819124056041"><p>Validator履行指责的话，可以得到相应奖励；若不作为或乱作为，会销毁或扣除相应的保证金</p><p>Q：投票达成的Finality会不会被推翻？</p><p>如果这个组织仅仅是矿工，而没有Validator作为同伙，那么Finality不可能被推翻。</p><p>攻击成功的情况：大量的Validator对两头有冲突的Finality都下注了，那么至少有1/3的验证者两边下注，一旦发现，保证金会全部没收</p><p>Q：为什么ETH没有在一开始就使用POS呢？</p><p>因为POS还没有那么成熟，而POW已经经过了时间的检验</p><p>EOS柚子，利用的是权益证明的思想，用的是DPOS：Delegated Proof of Stake的思想，投票产生21个超级节点，让这21个节点产生区块</p><blockquote><p>有人认为挖矿所占的电源对环境的影响有限，电是很难存储的，很难传输。挖矿能够有效利用过剩产能，带动当地经济发展。</p></blockquote><h2 id="第二十一节-eth智能合约">第二十一节 ETH智能合约</h2><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819141308698.png" class="" title="image-20240819141308698"><p>网络拍卖的具体例子</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819141910800.png" class="" title="image-20240819141910800"><p>payable：ETH中规定，能接收外部转账的函数，都要标注payable，<strong>why</strong></p><p>下面那个withdraw可以将自己出的以太币在拍卖结束后去回来</p><p>调用合约：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819142015004.png" class="" title="image-20240819142015004"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819142337210.png" class="" title="image-20240819142337210"><p>emit对程序的运行逻辑没有影响</p><p>这个过程实际上也是需要一个外部账户调用B的callFooDirectly，这个函数才能调用A的函数</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819142707065.png" class="" title="image-20240819142707065"><p>两种方法在错误处理中不同，使用call函数的话，深层函数出错，外层函数依旧能继续执行</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819142850930.png" class="" title="image-20240819142850930"><p>delegatecall不需要切换到被调用合约的环境中去执行，而是在当前合约中执行就可以了</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819143657602.png" class="" title="image-20240819143657602"><p>如果Data什么都不写，默认调用的函数。可以不定义fallback，但会抛出异常</p><p>转账金额是给收款人的，gas fee是给矿工的。转账金额可以是0，但gas fee不能是0</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819144102707.png" class="" title="image-20240819144102707"><p>Java Virtual Machine：增强可移植性</p><p>EVM类似，通过加一层虚拟机，为智能合约的执行提供一致性的平台，也成为World Wide Computer，寻址范围很大，256bit，远远大于目前的服务器寻址范围</p><p>矿工在打包智能合约的发布交易后，会返回一个合约地址</p><h3 id="gas-fee">gas-fee</h3><p>智能合约 Turing-complete Programming Model</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819144617073.png" class="" title="image-20240819144617073"><p>出现死循环：Halting Problem停机问题，<strong>不可解</strong>，不是NPC的</p><p>判断图是否为哈密尔顿回路，可解，但复杂度是指数级别的</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819145050749.png" class="" title="image-20240819145050749"><p>一次性先把GasLimit的汽油费扣掉，再根据实际的执行情况多退少补。如果交易发起方的Gas limit不够，那么这个交易会回滚，且已经消耗的gas fee不退。</p><p>ETH中的交易具有原子性，出现错误时要么redo要么undo。出现错误：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819145544233.png" class="" title="image-20240819145544233"> <img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819145835004.png" class="" title="image-20240819145835004"><p>sendTransfer会导致连锁式回滚，而callvalue不会导致连锁式回滚</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240818170621141.png" class="" title="image-20240818170621141"><p>GasUsed是指所有交易加起来的GasUsed</p><p>GasLimit是这个区块里所有交易能够消耗Gas的上限，而并非将所有交易的GasLimit总和。BTC固定了区块大小的上限1M，而由于ETH中所支持的智能合约交易会比较复杂，<strong>比如很少字节的交易可能会带来很大的资源开销</strong>，因此ETH不能简单地对区块的大小进行限制。</p><p>ETH的矿工可以对这个GasLimit进行微调，可以在上一个区块的基础上上调或下调<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>1024</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{1024}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，而15s就出一个区块，这些区块中的GasLimit都是按照矿工自己的意愿调整的，可以导致最终整个系统的Gas Limit趋于所有矿工的平均意见。</p><p>Q：汽油费是怎么扣的？</p><p>三棵树都是全节点在本地维护的数据结构，因此扣汽油费的操作是在本地的状态树中进行修改就行了，如果余额不够那么就不执行。<strong>智能合约执行过程中任何对状态的修改都是改本地的数据结构，只有当智能合约执行完毕以后，这种本地的修改才会发布到区块链上，成为外部可见的。</strong></p><p>矿工在挖矿的过程中，都是先执行相应的交易（修改本地内存的数据结构），如果监听到了别的全节点发布了新的区块，那么就把这个状态回滚到前一个区块，并执行这个发布的新的区块中的所有交易，以此达到<strong>共识</strong></p><p>Q：交易是先执行再打包到区块，还是先打包到区块再执行？</p><p>矿工的挖矿过程是组装候选区块。如上图的数据结构Header所示，矿工需要先执行完交易，再<strong>计算三个根hash，才能开始试nonce开始挖矿</strong>。因此是先执行后挖矿，没有办法先挖矿。</p><p>Q：如果我花费很多的计算资源在交易的执行上，但最后没有成功挖矿，我能得到什么补偿吗？</p><p>ETH中没有任何补偿，得不到Gas Fee也得不到任何补偿，同时还得执行新区块中的所有交易。<strong>因此，在这种机制下，挖矿慢的矿工会很吃亏。</strong></p><p>目前来讲，Gas Fee占比很小，所以并不是一个很大问题。</p><p>Q：会不会有这种情况：你不给我Gas Fee，那我就不验证了</p><p>如果这么干会危害区块链的安全。如果某个矿工想不通，这种风气蔓延会危害区块链的安全。**如果跳过这个验证，本地的数据结构跟系统就不一致了，以后都没法挖矿了。**因此跳过验证的步骤是不可行的。</p><p>Q：发布在区块链上的交易是不是都是成功执行的？</p><p>要扣掉Gas Fee，如果不发布到区块链上的话，Gas Fee扣不掉</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819154128432.png" class="" title="image-20240819154128432"><p>Q：智能合约是否支持多线程？</p><p>Solidity根本不支持多线程，不支持多核并行处理，没有这个语句。</p><p>ETH是交易驱动的状态机，要求在给定的起始状态在给定的状态转换函数后，能够到达新的确定的状态。多线程是异步的，结果是不确定的。<strong>因此ETH中无法产生真正意义上的随机数</strong></p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819154756486.png" class="" title="image-20240819154756486"><p>智能合约的确定性导致不能像传统编程语言那样通过system call来获取操作系统的状态信息，因为每个全节点的执行环境并非完全一样（有的是Linux，有的是Windows…）</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819155019126.png" class="" title="image-20240819155019126"><p>msg.data写了要调用的函数和参数</p><p>msg.sender和tx.origin不一样，如下图：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819155112986.png" class="" title="image-20240819155112986"><p>对于C2中的f2函数来说，msg.sender是C1，而tx.origin是A</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819155410238.png" class="" title="image-20240819155410238"><p>以上要理解addr是谁的balance，谁向谁转账</p><p>send和transfer的区别在于，transfer会导致连锁式回滚，send不会</p><p>call也可以用来转账，不会导致连锁式回滚，但是花的Gas fee会更高，所以一般不会用call去转账</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819160504434.png" class="" title="image-20240819160504434"><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819161133746.png" class="" title="image-20240819161133746"><p>智能合约这么写是有问题的，是没法改BUG的</p><p>autionEnd总会需要一个人去调s用的，没有办法自动执行</p><p>假如黑客这么干：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819161809266.png" class="" title="image-20240819161809266"><p>通过合约来参与拍卖，退款时会出现问题。钱只能退到黑客写的这个合约当中，而这个合约没有定义fallback函数，导致抛出异常，transfer函数所在的函数会被回滚，那此时所有参与拍卖的钱都会变成死钱。</p><p>矿工执行transfer函数本身只是更改本地的数据结构，并非在区块链中发起一笔新的交易。如果这个合约执行完毕，且矿工挖矿成功的话，全部状态才会上传到区块链中完成同步。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819162631462.png" class="" title="image-20240819162631462"><p>如果出现问题了，发布在区块链上的合约是没法改代码的，因此里面的钱也永远取不出来了</p><p>Code is law，好处是没有人能篡改规则，坏处是没有人能改BUG</p><p>不可撤销的信托irrevocable trust</p><p>因此在发布智能合约之前，需要测试，测试再测试。确保没有问题时，再发布。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819163229929.png" class="" title="image-20240819163229929"><p>不需要循环，参与竞标的人主动把钱取回</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819170020553.png" class="" title="image-20240819170020553"><p>结果就是黑客把合约中的钱全都转走了，递归结束条件：<u>合约上余额不够、Gas费不够、调用栈溢出</u></p><p>合适的做法是先清0，再转账，防止合约间递归调用的出现。区块链中任何的合约都可能是有恶意的。</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819170658112.png" class="" title="image-20240819170658112"><p>转账时用的是send。send和transfer有个共同的特点，就是Gas fee只有2300个单位，不足以让对方合约的fallback函数干别的事情，也因此能够防范重入攻击</p><h2 id="第二十二节-eth-the-dao">第二十二节 ETH-The DAO</h2><p>DAO：Decentralized Autonomous Organization</p><p>致力于众筹投资的DAO：The DAO，本质上是一个ETH上的智能合约。工作方式类似DAC：Decentralizad Autonomous Corporation</p><p>DAC是为了盈利赚钱的，而DAO可以是非盈利的</p><p>splitDAO，将大DAO进行拆分得到childDAO</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819172541799.png" class="" title="image-20240819172541799"><p>黑客在此会进行重入攻击，给ETH社区带来极大恐慌</p><p>如果出了问题就回滚，那就真的乱套了</p><p>The DAO：too big to fail，因此认为要管</p><p>采取补救措施的原则：只影响与黑客攻击相关的交易，而不影响其他的正常交易</p><p>升级软件：增加了一条新的判断规则，与The DAO发生交易的账户都不能发生交易。增加规则后新矿工挖的区块旧矿工认，但旧矿工挖的区块新区块可能不认，因此是软分叉。</p><p>但是有个bug，判断账户<strong>是否与DAO相关</strong>的交易要不要收取汽油费，即本来交易是合法的，但加了新的规则后交易非法，汽油费要不要收？</p><blockquote><p>要锁定与DAO相关的账户而不仅仅是锁定黑客的账户，是因为合约有可能会遭遇二次攻击。</p></blockquote><p>汽油费的机制目的在于提高攻击者发起交易的门槛，但以太坊EIP更新以后在此基础上没有收取汽油费，导致全节点收到很多恶意攻击，最终矿工纷纷回滚到之前的版本。</p><p>EIP最终采取<strong>硬分叉</strong>的方式，强行将这个智能合约的钱转到新的智能合约当中。为什么是硬分叉？用软件升级的方式重新指定的规则，旧矿工认为这是非法的交易，因此是硬分叉。大部分人都支持硬分叉。</p><p>但是旧链上依旧有人用，叫ETC（Ehereum Classic），经典以太坊，旧链上挖矿难度小。但是两条链并存会带来很多问题，比如重放攻击：</p><p>新链的交易在旧链上是合法的，旧链的交易在新链上的算力也是合法的。因此采用ChainID对两者进行区分。</p><h2 id="第二十三节-eth反思">第二十三节 ETH反思</h2><p>Is smart contract really smart?</p><p>ATM可以看作物理世界上的自动合约，按照事先规定的规则执行。</p><ul><li><p>Smart contract is anything but smart. 智能合约并非智能</p></li><li><p>Irrevocability is a double edged sword. 不可篡改性实际上是双刃剑</p></li></ul><p>不可篡改性增大的合约的公信力，但也意味着无法更新升级。要升级就必然会导致硬分叉，硬分叉要说明理由，但说明理由后就会有黑客在升级前抢先发起攻击，导致更多的损失。</p><ul><li><p>人们发现有非法交易后，无法冻结账户，且无法阻止区块链上对智能合约的调用。</p><ul><li>只能是自己也发动攻击，利用与黑客同样的手法，赶紧将合约中的钱转走</li></ul></li><li><p>Nothing is irrevocability. 不要迷信区块链的不可篡改性。连宪法都可以改，为什么区块链改不了。</p><ul><li>Prohibition 18，全国范围内禁酒。21修正案，推翻</li><li>open container laws</li></ul></li><li><p>Is solidity the right programming language?</p><ul><li>formal verification 正确性的证明，智能合约的终极目标</li><li>智能合约会最终走向成熟</li></ul></li><li><p>开源的好处是什么</p><ul><li>公信力、安全</li><li>Many eyeball fallacy(misbelief)，但实际真正有人看代码的人少之又少，<strong>不要认为开源的软件就安全</strong>，涉及财产安全的，要自己看看合约中写的是否有问题</li></ul></li><li><p>What does decentralization mean?</p><ul><li>不全是ETH开发团队说了算，硬分叉的成功是多数矿工的支持导致的，ETH没有办法强迫矿工升级</li><li>去中心化并不是说全自动化，不能有人为的干预</li><li>也不是说已经指定的规则不能修改，而是说规则的修改要用去中心化的方式来完成</li><li>分叉恰恰是去中心化的提现，而中心化的系统中没有办法分叉。分叉的出现恰恰是民主的体现。</li></ul></li><li><p>Decentralized ≠ Distrubution</p><ul><li>在分布式的平台上，可运行分布式应用，也可以运行去中心化的应用</li><li>ETH是一个状态机state machine，状态机的目的不是为了速度，而是为了容错</li><li>mission critical applications: air traffic control, stock exchange, space shutlle</li><li>不要把EVM平台当做大规模计算和存储服务，不仅速度慢，且贵。智能合约是用来编写控制逻辑的，在互不信任的实体之间建立共识的操作才需要写在智能合约里。</li></ul></li></ul><h2 id="第二十四节-eth-美链">第二十四节 ETH-美链</h2><p>Beauty Chain</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819193753958.png" class="" title="image-20240819193753958"><p>ICO: Initial Coin Offering，依附在基础链上的交易系统</p><p>IPO: Initial Public Offering</p><p>发行规则：1ETH=100BEC</p><p>ERC：Ethereum Request for Comments</p><p>batchTransfer的实现：</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819195012583.png" class="" title="image-20240819195012583"><p>乘法发生了溢出</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819195321058.png" class="" title="image-20240819195321058"><p>在进行数学运算时一定要进行溢出的检测</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819195537332.png" class="" title="image-20240819195537332"><h2 id="第二十五节-总结">第二十五节 总结</h2><p>区块链的一些应用：</p><ul><li>保险理赔的：理赔速度慢是因为理赔的内容需要人工审核，而区块链本身并没有好的优势</li><li>溯源：如果农产品被撒了农药，或运输销售过程中被掉包，区块链本身检测不出来。</li><li>共识机制：在互不信任的实体之间建立共识，但也有人说这是个伪命题，因为你不会去一个没有信用的商家那里买东西。</li><li><strong>中心化和去中心化的界限并非黑白分明的</strong>，并不是说使用了去中心化的支付方式，就意味着商业模式必须是去中心化的</li></ul><p>区块链的不可篡改性：一旦发布交易，无法撤销。但共识协议中没有撤销的机制。所谓的退款实在应用层重新发起一次退款，是两笔不同的交易。</p><p>法律的监管和保护：有一些支付方式是受到法律的监管和保护的。区块链目前是缺乏监管的。但是监管本身并不是一件坏事，因为出了事之后没有人能保护你。法律上的监管和保护措施和信用卡在技术层面上的设计其实是没有什么必然联系的。</p><p>BTC不应该与已有的支付方式去竞争。而是应用于目前已有的支付方式解决的不是很好的领域，比如跨过转账。目前缺乏一种能在全球流通的电子货币</p><p>支付方式的效率：每个交易的能耗非常大，浪费电，不能做到绿色环保。</p><ul><li>不与已有的支付方式竞争，如果觉得比特币不环保就去用信用卡</li><li>随着区块链技术的发展，一些加密货币在支付效率上已经有了很大的提升</li><li>评价一个支付方式效率要有唯物史观，要在特定的历史条件下去看，要跟当时存在的支付方式相比较</li></ul><p>智能合约相关：编程语言书写的，老百姓看不懂，反而不利于检查安全漏洞</p><ul><li>程序化是个大趋势 Software is eating the world</li></ul><p>物理世界的智能合约：ATM机。ATM机也会出问题，到现在还会发生故障，但不会因为ATM出现故障就不去使用了。</p><ul><li>将来会出现智能合约的成熟模板</li><li>智能合约和去中心化不能解决所有的问题<ul><li>民主一定是正确的吗，大的决策就是好的事情吗？</li><li><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819202846336.png" class="" title="image-20240819202846336"></li><li>不是最好的方法，只是最不坏的方法</li></ul></li></ul><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819203117445.png" class="" title="image-20240819203117445"><p>不一定。现实生活中所做的决定是很复杂的，并非简单投一个票就可以决定。不要以为去中心化就能解决所有问题，不要以为去中心化的商业模式就一定是好的</p><img src="/2024/08/19/PKU-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20240819203745610.png" class="" title="image-20240819203745610">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>全栈学习</title>
      <link href="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="全栈学习">全栈学习</h1><p>Springboot+MyBatisPlus+Vue</p><h2 id="mvc模式">MVC模式</h2><p>Model+View+Controller</p><p>Model是模型层，用于数据的持久化存储；View是视图层，用户呈现数据；Controller是控制器层，用于接收用户的请求并进行相应的操作。</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606183918675.png" class="" title="image-20240606183918675"><h2 id="代码格式">代码格式</h2><p>Java代码需要给每个角色分配一个包，包内的命名格式为：实体+包名</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606185709355.png" class="" title="image-20240606185709355"><h2 id="控制器-controller">控制器（Controller）</h2><p>直接在类上加<code>@RestController</code>注解</p><p>接收请求可以用<code>@RequestMapping</code>注解，一般的GET请求格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "user", method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><p>参数传递时保持一致就行，如果不一致就在参数前添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam(value = "nickname", required = false)</span></span><br></pre></td></tr></table></figure><h2 id="静态资源访问">静态资源访问</h2><p>将资源放在static目录下，在application.properties中添加过滤规则和静态资源路径</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606184655272.png" class="" title="image-20240606184655272"><p>随后用url就可以访问，也可以配置虚拟路径。</p><h2 id="文件上传">文件上传</h2><p>POST请求，将客户端传过来的文件存储在服务器的本地</p><p>添加配置，设定文件大小</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure><p>添加FileUploadController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/upload", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">up</span><span class="params">(String nickname, MultipartFile photo, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        System.out.println(nickname);</span><br><span class="line">        <span class="comment">// 获取图片原始名称</span></span><br><span class="line">        System.out.println(photo.getOriginalFilename());</span><br><span class="line">        <span class="comment">// 获取文件类型</span></span><br><span class="line">        System.out.println(photo.getContentType());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        saveFile(photo, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(MultipartFile photo, String path)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) {</span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            dir.mkdir();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path + photo.getOriginalFilename());</span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="拦截器-interceptor">拦截器（Interceptor）</h2><p>用于权限检查、性能监控等，可以直接放入项目代码</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606185219828.png" class="" title="image-20240606185219828"><p>需要实现HandlerInterceptor接口并重写其中的preHandle、postHandle、afterCompletion方法，其中preHandle比较常用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        System.out.println(<span class="string">"LoginInterceptor"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>随后需要在WebConfig中进行拦截器的注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> {</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="生成api-swagger">生成API（Swagger）</h2><p>用于快速生成API文档，以下代码能够直接放在项目中</p><p>在pom.xml中添加依赖。注意Springboot的版本<strong>不能超过3</strong>，否则会出问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   添加swagger2相关功能    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   添加swagger-ui相关功能    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加Swagger2Config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉Spring容器，这个类是一个配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">// 启用Swagger2功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Swagger2相关的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// com 包下的所有API都交给Swagger2容器</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com"</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// API文档页面提示信息</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">"演示项目API"</span>) <span class="comment">// 标题</span></span><br><span class="line">                .description(<span class="string">"学习Swagger2的演示项目"</span>) <span class="comment">// 描述</span></span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>运行后直接访问http://localhost:8080/swagger-ui.html#/即可</p><p>常用注解：</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606190157540.png" class="" title="image-20240606190157540"><h2 id="mybatisplus">MyBatisPlus</h2><p>用于操作数据库，是MyBatis的增强版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatisPlus依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    数据连接池 druid    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?userSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">YOUR_PASSWORD</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>数据库的增删改查操作放在mapper包里面，定义的都是接口类</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606190652436.png" class="" title="image-20240606190652436"><p>有两种选择：</p><ul><li>自己写SQL语句</li><li>继承BaseMapper&lt;T&gt;，T表示要操作的实体，随后用MyBatisPlus写好的SQL语句</li></ul><p>MyBatis一些自带的注解：</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606190945773.png" class="" title="image-20240606190945773"><p>单表查询示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select * from t_user where id = #{id}")</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>多表查询：</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606191132941.png" class="" title="image-20240606191132941"><p>多表查询示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户及其所有的订单</span></span><br><span class="line"><span class="meta">@Select("select * from t_user")</span></span><br><span class="line"><span class="meta">@Results(</span></span><br><span class="line"><span class="meta">        {</span></span><br><span class="line"><span class="meta">                @Result(column = "id", property = "id"),</span></span><br><span class="line"><span class="meta">                @Result(column = "username", property = "username"),</span></span><br><span class="line"><span class="meta">                @Result(column = "password", property = "password"),</span></span><br><span class="line"><span class="meta">                @Result(column = "birthday", property = "birthday"),</span></span><br><span class="line"><span class="meta">                @Result(column = "id", property = "orders", javaType = List.class,</span></span><br><span class="line"><span class="meta">                        many = @Many(select = "com.example.mpdemo.mapper.OrderMapper.selectByUid")</span></span><br><span class="line"><span class="meta">                )</span></span><br><span class="line"><span class="meta">        }</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectAllUserAndOrders</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有的订单，同时查询订单的用户</span></span><br><span class="line">    <span class="meta">@Select("select * from t_order")</span></span><br><span class="line">    <span class="meta">@Results(</span></span><br><span class="line"><span class="meta">            {</span></span><br><span class="line"><span class="meta">                    @Result(column = "id", property = "id"),</span></span><br><span class="line"><span class="meta">                    @Result(column = "orderTime", property = "orderTime"),</span></span><br><span class="line"><span class="meta">                    @Result(column = "total", property = "total"),</span></span><br><span class="line"><span class="meta">                    @Result(column = "uid", property = "user", javaType = User.class,</span></span><br><span class="line"><span class="meta">                        one = @One(select = "com.example.mpdemo.mapper.UserMapper.selectById")</span></span><br><span class="line"><span class="meta">                    )</span></span><br><span class="line"><span class="meta">            }</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">selectAllOrdersAndUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>分页查询，用Page指定：</p><p>添加MyBatisPlusConfig，添加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="meta">@GetMapping("/user/findByPage")</span></span><br><span class="line"><span class="keyword">public</span> IPage <span class="title function_">findByPage</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// 设置起始值及每页条数，可以设置想要查询的条数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> userIPage;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>条件查询，用queryWrapper指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line">   <span class="meta">@GetMapping("/user/find")</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findByCond</span><span class="params">()</span> {</span><br><span class="line">       QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(<span class="string">"username"</span>, <span class="string">"keikei"</span>);</span><br><span class="line">       <span class="keyword">return</span> userMapper.selectList(queryWrapper);</span><br><span class="line">   }</span><br></pre></td></tr></table></figure><p>更新、删除、修改等操作有对应的Mapping类型</p><img src="/2024/06/06/%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20240606191459665.png" class="" title="image-20240606191459665">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android学习</title>
      <link href="/2024/04/25/Android%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/25/Android%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="android学习">Android学习</h1><p>逻辑和视图分离</p><p>Application和Activity的区别：</p><ul><li>一个应用程序只能有一个Application，而可以有多个Activity</li></ul><p>修改UI界面：</p><ul><li>在Layout文件夹下添加abc.xml文件</li><li>添加Activity类，并在类中重写onCreate方法，方法中调用setContentView方法即可</li></ul><img src="/2024/04/25/Android%E5%AD%A6%E4%B9%A0/image-20240427202035269.png" class="" title="image-20240427202035269">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【AI】人工智能导论汇总</title>
      <link href="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/"/>
      <url>/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="复习汇总">复习汇总</h1><h2 id="agent的环境性质：可观测-不可观测-确定的-随机的-已知的-未知的-等等">Agent的环境性质：可观测/不可观测、确定的/随机的、已知的/未知的…等等。</h2><ol><li><p>完全可观察与部分可观察：如果Agent的传感器在每个时间点上都能获取环境的完整状态（或传感器能够检测所有与行动决策相关的信息），则任务环境是完全可观察的，否则构成部分可观察环境。噪声、不精确传感器或传感器丢失部分数据，都可能导致环境成分部分可观察。</p></li><li><p>确定性与随机性环境：如果环境的下一个状态完全取决于当前状态和Agent执行的动作，则该环境是确定的；否则，它是随机的。事实上，如果环境是部分可观察的，则一般可以将其建模为随机性环境。</p></li><li><p>已知和未知：这里指的是Agent的知识状态，比如环境物理法则等。在已知环境中，所有行动的后果是给定的（尽管针对随机环境，其后果呈现出概率特性，但仍然可以看作是已知）；如果环境未知，则Agent需要学习环境如何工作，以便做出最好决策。环境的已知与否与可观察性不是一回事，环境已知与否只是对环境的物理规则或知识的刻画，而可观察性是指能否完全对环境状态进行观测获得。</p></li></ol><h2 id="常见的无信息搜索-及其特点">常见的无信息搜索，及其特点。</h2><p>常见的无信息搜索：广度优先搜索、深度优先搜索、深度受限搜索、迭代加深的深度优先搜索、一致代价搜索（Dijkstra算法）、双向搜索</p><p>常见的无信息搜索评价：</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710094217514.png" class="" title="image-20230710094217514"><h2 id="算法的完备性-最优性-时间复杂度-空间复杂度">算法的完备性、最优性、时间复杂度、空间复杂度。</h2><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710094328722.png" class="" title="image-20230710094328722"><h2 id="一般的树搜索-图搜索">一般的树搜索、图搜索。</h2><p>搜索算法的一般流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 初始化</span><br><span class="line">while {</span><br><span class="line">2. 选择</span><br><span class="line">3. 目标检测</span><br><span class="line">4. 扩展</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>Tree-search：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frontier = {A} ①初始化</span><br><span class="line">while</span><br><span class="line">  ② if frontier = ⌀, return failure 选择</span><br><span class="line">best_node &lt;- get_best_node(frontier)</span><br><span class="line">frontier &lt;- frontier - {best_node}</span><br><span class="line">  ③ if is_goal(best_node) return solution 目标检测</span><br><span class="line">  ④ list &lt;- successor(best_node) 扩展</span><br><span class="line">    frontier &lt;- frontier + list</span><br></pre></td></tr></table></figure><p>Graph-search：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">frontier = {S}, closed = ⌀ ①初始化</span><br><span class="line">while</span><br><span class="line">if frontier = ⌀, return failure ②选择</span><br><span class="line">best_node &lt;- get_best_node(frontier) ②选择</span><br><span class="line">frontier &lt;- frontier - {best_node} ②选择</span><br><span class="line">closed &lt;- closed + {best_node} ②选择</span><br><span class="line">if is_goal(best_node), return solution ③目标检测</span><br><span class="line">list &lt;- successor(best_node) ④扩展</span><br><span class="line">list &lt;- list - frontier - closed ④扩展</span><br><span class="line">frontier &lt;- frontier + list ④扩展</span><br></pre></td></tr></table></figure><h2 id="什么是a-搜索-在a-搜索中-什么是启发函数的可纳性-一致性-单调性-信息度">什么是A*搜索。在A*搜索中，什么是启发函数的可纳性、一致性（单调性）、信息度?</h2><p>A*算法的空间复杂度很高怎么办？剪枝。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710094956923.png" class="" title="image-20230710094956923"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710095006305.png" class="" title="image-20230710095006305"><p><strong>可纳性：估计代价比实际代价低</strong></p><p><strong>一致性：三角不等式</strong></p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710100446082.png" class="" title="image-20230710100446082"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101035201.png" class="" title="image-20230710101035201"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101045158.png" class="" title="image-20230710101045158"><p>根据松弛的方法构造启发式函数h(n)：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>h</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)=\max(h_1(n),...,h_k(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><h2 id="局部搜索算法-爬山法；模拟退火算法；遗传算法；探索vs-利用">局部搜索算法。爬山法；模拟退火算法；遗传算法；探索vs.利用。</h2><p>局部搜索算法的定义：</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101551143.png" class="" title="image-20230710101551143"><p>常见的爬山策略：最陡上升、随机爬山、首选爬山、随机重启</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101641903.png" class="" title="image-20230710101641903"><p>算法只需要记录当前状态和目标函数值，因此空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101745098.png" class="" title="image-20230710101745098"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101844477.png" class="" title="image-20230710101844477"><p>模拟退火算法：既考虑“上山”，也考虑“下山”</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710101922600.png" class="" title="image-20230710101922600"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102029321.png" class="" title="image-20230710102029321"><p>局部束搜索：可以理解为k倍慢的爬山法</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102147373.png" class="" title="image-20230710102147373"><p>遗传算法：三个主要算子：<strong>选择、交叉、变异</strong>。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102304600.png" class="" title="image-20230710102304600"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102316931.png" class="" title="image-20230710102316931"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102343387.png" class="" title="image-20230710102343387"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102353437.png" class="" title="image-20230710102353437"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710102429451.png" class="" title="image-20230710102429451"><p>探索&amp;利用</p><p>探索：在搜索中将未知知识变成已知</p><p>利用：利用知识进行搜索</p><p>爬山法：纯利用f（知识），有效率但无完备性</p><p>随机：纯搜索，低效但完备</p><p>模拟退火：初期探索多，后期利用多</p><p>遗传算法的选择、交叉（利用为主，探索为辅）、变异（剧烈探索）</p><h2 id="对抗搜索-极小极大搜索-alpha-beta搜索及剪枝">对抗搜索。极小极大搜索、Alpha-beta搜索及剪枝。</h2><p>博弈树</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103140954.png" class="" title="image-20230710103140954"><p>极大极小算法（深度优先）</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103215230.png" class="" title="image-20230710103215230"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103229959.png" class="" title="image-20230710103229959"><p>Alpha-Beta搜索</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103329416.png" class="" title="image-20230710103329416"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103342833.png" class="" title="image-20230710103342833"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103400998.png" class="" title="image-20230710103400998"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103419210.png" class="" title="image-20230710103419210"><p>剪枝的本质：在搜索树中忽略那些不影响最后决策的子树。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103548222.png" class="" title="image-20230710103548222"><h2 id="什么是约束满足搜索？如何将一个实际问题形式化为约束满足问题">什么是约束满足搜索？如何将一个实际问题形式化为约束满足问题</h2><p>什么是约束满足问题：（状态从<strong>原子化表示</strong>转换为<strong>因子化表示</strong>）</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103619596.png" class="" title="image-20230710103619596"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103723822.png" class="" title="image-20230710103723822"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103748859.png" class="" title="image-20230710103748859"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710103805909.png" class="" title="image-20230710103805909"><p>如何将一个实际问题形式化为约束满足问题：说清楚X、Domain、Constrain三者都是什么。</p><h2 id="什么是弧相容？弧相容检查的时间复杂度？">什么是弧相容？弧相容检查的时间复杂度？</h2><p>弧相容（arc consistency）：变量值域中的所有取值满足该变量的所有二元约束，与两个变量有关（如SA≠NSW）</p><p>AC-3算法时间复杂性：CSP有n个变量，每个变量的域大小不超过d，带有c个二元约束，算法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>c</mi><msup><mi>d</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(cd^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710104644210.png" class="" title="image-20230710104644210"><ol start="10"><li>Arc-3弧相容检查算法</li></ol><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710104715885.png" class="" title="image-20230710104715885"><p>目前有一个问题样例，有三个变量A、B、C，每个变量的值域为{0，1，2，3，4}，约束为A=B+1和B=2C，请用AC-3算法进行求解并说明完整的求解流程。</p><blockquote><p>你好，这是Bing。我可以帮你解答这个问题。😊</p><p>AC-3算法是一种用于求解约束满足问题（CSP）的弧相容算法，它可以消除变量域中不满足二元约束的值，从而缩小搜索空间¹²。AC-3算法的基本思想是维护一个弧相容队列，其中存放了CSP中的所有弧，每次从队列中取出一条弧（X_i,X_j），并检查X_i是否对X_j弧相容，即X_i的每个值是否有与之相容的X_j的值。如果没有，就删除X_i的这个值，并将所有与X_i有约束的变量和X_i组成的弧重新加入队列。重复这个过程直到队列为空或者某个变量的域为空¹³⁴。</p><p>AC-3算法的伪代码如下¹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;function AC-3(csp) return false if an inconsistency is found and true otherwise</span><br><span class="line">&gt;inputs: csp, a binary CSP with components (X,D,C)</span><br><span class="line">&gt;local variables: queue, a queue of arcs, initially all the arcs in csp</span><br><span class="line">&gt;while queue is not empty do</span><br><span class="line">&gt;(Xi,Xj) &lt;- REMOVE-FIRST(queue)</span><br><span class="line">&gt;if REVISE(csp,Xi,Xj) then</span><br><span class="line">  if size of Di = 0 then return false</span><br><span class="line">  for each Xk in Xi NEIGHBORS - {Xj} do</span><br><span class="line">      add (Xk,Xi) to queue</span><br><span class="line">&gt;return true</span><br><span class="line"></span><br><span class="line">&gt;function REVISE(csp,Xi,Xj) return true if we revise the domain of Xi</span><br><span class="line">&gt;revised &lt;- false</span><br><span class="line">&gt;for each x in Di do</span><br><span class="line">&gt;if no value y in Dj allows (x,y) to satisfy the constraint between Xi and Xj then</span><br><span class="line">  delete x from Di</span><br><span class="line">  revised &lt;- true</span><br><span class="line">&gt;return revised</span><br></pre></td></tr></table></figure><p>对于你给出的问题样例，有三个变量A、B、C，每个变量的值域为{0，1，2，3，4}，约束为A=B+1和B=2C，我们可以用AC-3算法进行求解，并说明完整的求解流程如下：</p><ul><li>首先，构造约束图，其中有三个节点A、B、C，分别代表三个变量，有两条有向边(A,B)和(B,C)，分别代表两个约束。</li><li>然后，将所有的弧加入队列，即{(A,B),(B,A),(B,C),(C,B)}。</li><li>从队列中取出一条弧，假设是(A,B)，检查A是否对B弧相容。由于A=B+1，所以当B取0时，A只能取1；当B取1时，A只能取2；当B取2时，A只能取3；当B取3时，A只能取4；当B取4时，A没有可取的值。因此，我们可以删除A的域中的0这个值，并将与A有约束的变量和A组成的弧(B,A)加入队列。此时，队列为{(B,A),(B,C),(C,B),(B,A)}，A的域为{1,2,3,4}。</li><li>从队列中取出一条弧，假设是(B,A)，检查B是否对A弧相容。由于A=B+1，所以当A取1时，B只能取0；当A取2时，B只能取1；当A取3时，B只能取2；当A取4时，B只能取3。因此，我们可以删除B的域中的4这个值，并将与B有约束的变量和B组成的弧(C,B)加入队列。此时，队列为{(B,C),(C,B),(B,A),(C,B)}，B的域为{0,1,2,3}。</li><li>从队列中取出一条弧，假设是(B,C)，检查B是否对C弧相容。由于B=2C，所以当C取0时，B只能取0；当C取1时，B只能取2；当C取2时，B没有可取的值；当C取3时，B没有可取的值；当C取4时，B没有可取的值。因此，我们可以删除B的域中的1和3这两个值，并将与B有约束的变量和B组成的弧(A,B)和(C,B)加入队列。此时，队列为{(C,B),(B,A),(C,B),(A,B),(C,B)}，B的域为{0,2}。</li><li>从队列中取出一条弧，假设是(C,B)，检查C是否对B弧相容。由于B=2C，所以当B取0时，C只能取0；当B取2时，C只能取1。因此，我们可以删除C的域中的2,3,4这三个值，并将与C有约束的变量和C组成的弧(B,C)加入队列。此时，队列为{(B,A),(C,B),(A,B),(C,B),(B,C)}，C的域为{0,1}。</li><li>从队列中取出一条弧，假设是(B,A)，检查B是否对A弧相容。由于A=B+1，所以当B取0时，A只能取1；当B取2时，A只能取3。因此，我们可以删除A的域中的2和4这两个值，并将与A有约束的变量和A组成的弧(B,A)加入队列。此时，队列为{(C,B),(A,B),(C,B),(B,C),(B,A)}，A的域为{1,3}。</li><li>从队列中取出一条弧，假设是(C,B)，检查C是否对B弧相容。由于B=2C，所以当C取0时，B只能取0；当C取1时，B只能取2。因此，我们不需要删除C的域中的任何值，并且不需要加入任何新的弧到队列中。此时，队列为{(A,B),(C,B),(B,C),(B,A)}，C的域为{0,1}。</li><li>从队列中取出一条弧，假设是(A,B)，检查A是否对B弧相容。由于A=B+1，所以当B取0时，A只能取1；当B取2时，A只能取3。因此，我们不需要删除A的域中的任何值，并且不需要加入任何新的弧到队列中。此时，队列为{(C,B),(B,C),(B,A)}，A的域为{1,3}。</li><li>从队列中取出一条弧，假设是(C,B)，检查C是否对B弧相容。由于之前已经检查过这条弧，并且没有改变过任何变量的域，所以我们不需要再次检查，并且不需要加入任何新的弧到队列中。此时，队列为{(B,C),(B,A)}。</li><li>从队列中取出一条弧，假设是(B,C)，检查B是否对C弧相容。由于之前已经检查过这条弧，并且没有改变过任何变量的域，所以我们不需要再次检查，并且不需要加入任何新的弧到队列中。此时，队列为{(B,A)}。</li><li>从队列中取出一条弧，假设是(B,A)，检查B是否对A弧相容。由于之前已经检查过这条弧，并且没有改变过任何变量的域，所以我们不需要再次检查，并且不需要加入任何新的弧到队列中。此时，队列为空。</li><li>因为没有发现任何变量的域为空，并且所有的弧都已经检查</li><li>A={1,3} B={0,2} C={0,1}</li><li>所以(A,B,C)=(1,0,0)或(3,2,1)</li></ul></blockquote><h2 id="特殊结构上的约束满足搜索-树结构上的约束满足搜索">特殊结构上的约束满足搜索。树结构上的约束满足搜索。</h2><p>回溯法解约束满足搜索问题</p><p>变量排序：</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710111826124-16889591083591.png" class="" title="image-20230710111826124"><p>值排序：</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710111848866.png" class="" title="image-20230710111848866"><h2 id="不确定的表示-概率公理-加法公式和乘法公式-条件独立性-概率推理">不确定的表示。概率公理、加法公式和乘法公式、条件独立性。概率推理。</h2><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710112555153.png" class="" title="image-20230710112555153"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710112605981.png" class="" title="image-20230710112605981"><h2 id="贝叶斯网络-贝叶斯网络的语义；全联合概率分布表示为条件分布之积；马尔可夫覆盖-会将p-x-mb-x-表示为贝叶斯网络中各条件分布的表达式">贝叶斯网络。贝叶斯网络的语义；全联合概率分布表示为条件分布之积；马尔可夫覆盖。会将P(X|MB(X))表示为贝叶斯网络中各条件分布的表达式。</h2><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710112807747.png" class="" title="image-20230710112807747"><p>贝叶斯网络的语义：</p><p>​基于对联合概率分布的表示、基于对条件依赖性（条件独立性）的编码</p><p>贝叶斯网络中的条件独立性：</p><ul><li>给定父节点，一个节点条件独立于它的非后代结点</li><li>给定节点的父节点，子节点以及子节点的父节点（Markov Blanket），这个节点条件独立与网络中的所有其他节点</li></ul><p>马尔科夫覆盖MB：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>r</mi><mi>k</mi><mi>o</mi><mi>v</mi><mi>B</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>k</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>P</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo stretchy="false">(</mo><mi>C</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Markov Blanket=Parents(X_i) + Children(X_i)+Parents(Children(X_i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mtext>网络中除</mtext><msub><mi>X</mi><mi>i</mi></msub><mtext>以外的所有其他结点</mtext><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi>M</mi><mi>B</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X_i|网络中除X_i以外的所有其他结点)=P(X_i|MB(X_i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord cjk_fallback">网</span><span class="mord cjk_fallback">络</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">除</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">外</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">他</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">点</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>精确推理：</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710113434809.png" class="" title="image-20230710113434809"><h2 id="贝叶斯网络上的不确定推理：先验采样-拒绝采样-似然加权采样-吉布斯采样-建议参考cs188对应的贝叶斯网络ppt中的各个例题-会对贝叶斯网络进行吉布斯采样">贝叶斯网络上的不确定推理：先验采样、拒绝采样、似然加权采样、吉布斯采样。建议参考cs188对应的贝叶斯网络ppt中的各个例题，会对贝叶斯网络进行吉布斯采样。</h2><p>精确推理的时间复杂度太高，往往是不实际的。因此要通过采样进行近似推理。</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710113530448.png" class="" title="image-20230710113530448"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710113555210.png" class="" title="image-20230710113555210"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710113620049.png" class="" title="image-20230710113620049"><h2 id="马尔可夫决策过程和强化学习">马尔可夫决策过程和强化学习。</h2><p>什么是马尔可夫决策过程（Markov Decision Process）?</p><p>马尔可夫决策过程：S, A, T, R, Gamma</p><p>解：Pi</p><p>值函数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q(s,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span></p><p>策略函数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi(a|s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span></p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710114803255.png" class="" title="image-20230710114803255"><p>贝尔曼方程（基本）</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710114519778.png" class="" title="image-20230710114519778"><p>贝尔曼方程（迭代版本）</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710114538328.png" class="" title="image-20230710114538328"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115242532.png" class="" title="image-20230710115242532"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115329322.png" class="" title="image-20230710115329322"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115550096.png" class="" title="image-20230710115550096"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115600521.png" class="" title="image-20230710115600521"><p>值迭代算法</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115637647.png" class="" title="image-20230710115637647"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115649385.png" class="" title="image-20230710115649385"><p>策略迭代</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115659512.png" class="" title="image-20230710115659512"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115714784.png" class="" title="image-20230710115714784"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115726873.png" class="" title="image-20230710115726873"><h2 id="理解主动强化学习-被动强化学习；在线-on-policy-同策略学习-off-policy-异策略-离线学习；基于模型的学习-无模型的学习-掌握基于模型的方法-对模型进行估计-q学习-td学习-建议理解cs188对应的强化学习的ppt中的各种方法和例题">理解主动强化学习/被动强化学习；在线（On-policy，同策略学习）/(Off-policy，异策略)离线学习；基于模型的学习/无模型的学习。掌握基于模型的方法（对模型进行估计）、Q学习、TD学习。建议理解cs188对应的强化学习的ppt中的各种方法和例题。</h2><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115859698.png" class="" title="image-20230710115859698"><p>被动强化学习：给定策略</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115945290.png" class="" title="image-20230710115945290"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710115954642.png" class="" title="image-20230710115954642"><p>TD学习</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710120015083.png" class="" title="image-20230710120015083"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710120023103.png" class="" title="image-20230710120023103"><p>主动强化学习</p><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710120040403.png" class="" title="image-20230710120040403"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710120046544.png" class="" title="image-20230710120046544"><img src="/2023/07/02/%E3%80%90AI%E3%80%91%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%E6%B1%87%E6%80%BB/image-20230710120059764.png" class="" title="image-20230710120059764"><ul><li>TD被动强化学习偏向于利用已经给定的策略<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span></li><li>Q主动强化学期既有利用策略<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>，同时不断进行策略提升（探索）以优化策略<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>。</li></ul><h1 id="算法实例">算法实例</h1><ol><li>A*搜索：<a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html">https://www.redblobgames.com/pathfinding/a-star/introduction.html</a></li><li>模拟退火搜索：<a href="https://zhuanlan.zhihu.com/p/266874840">https://zhuanlan.zhihu.com/p/266874840</a></li><li>约束满足问题：<a href="https://dspace.mit.edu/bitstream/handle/1721.1/36896/5/16-410Fall-2003/NR/rdonlyres/Aeronautics-and-Astronautics/16-410Principles-of-Automated-Reasoning-and-Decision-MakingFall2003/CBCE78FB-85FE-40C0-92ED-0EBB3F56356A/0/l6b_c_p_handout.pdf">https://dspace.mit.edu/bitstream/handle/1721.1/36896/5/16-410Fall-2003/NR/rdonlyres/Aeronautics-and-Astronautics/16-410Principles-of-Automated-Reasoning-and-Decision-MakingFall2003/CBCE78FB-85FE-40C0-92ED-0EBB3F56356A/0/l6b_c_p_handout.pdf</a></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha-\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>搜索：<a href="https://zhuanlan.zhihu.com/p/65219446">https://zhuanlan.zhihu.com/p/65219446</a></li><li>隐马尔可夫模型：<a href="https://sm1les.com/2019/04/10/hidden-markov-model/">https://sm1les.com/2019/04/10/hidden-markov-model/</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】与Git的爱恨情长</title>
      <link href="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/"/>
      <url>/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="与git的爱恨情长">与Git的爱恨情长</h1><h1 id="前言">前言</h1><p>在我的印象里，上传代码就是鼠标点两下就可以解决的事情。然而，当项目需要把代码上传到Git上时，我发现事情远远没有我想象当中的那么简单。Git的commit、branch、push等功能给了我当头一棒，然后我就把我的一个下午奉献给了这个<s>可爱的</s>Git。那么本文主要是总结Git的一些使用方法和使用步骤，以便未来在项目开发上不会因为不懂Git怎么用而处处撞墙。</p><h1 id="git简介">Git简介</h1><p>我们看到Git的第一时间容易联想到Github或者Gitee，然而他们本质上不是一个东西。Git是一个代码版本管理工具，而Github和Gitee属于代码仓库，他们两者的功能存在很大的区别。当我们的代码昨天能跑，今天加了点东西就死了的时候，那Git就能帮我们把代码的版本退回到昨天，乍一看还是非常方便的。所以我认为搞项目开发还是非常有必要学一学Git。</p><p>首先就是要学会如何在本地搭建Git的环境。实际上这个网上都有教程，我这里就不详细赘述。问题在于有了Git，我们要怎么把我们的代码上传到代码托管平台？</p><h2 id="代码上传">代码上传</h2><p>在Github官网上创建一个Repository，进入到这个页面。</p><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/image-20230528185228515.png" class="" title="image-20230528185228515"><p>跟着它的教程做就可以了，也就是一下的步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git commit -m &quot;&lt;ANY_MESSAGE&gt;&quot;</span><br><span class="line">git branch -M &lt;BRANCH&gt;</span><br><span class="line">git remote add origin https://github.com/&lt;USER_NAME&gt;/&lt;REPO&gt;.git</span><br><span class="line">git push -u origin &lt;BRANCH&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>git commit -m</code>用于上传代码的提交信息，即出现在这里。</li></ul><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/image-20230528202500160.png" class="" title="image-20230528202500160"><ul><li><code>git branch -M</code>即切换本地分支。在Git中有本地分支和远程分支的概念。远程分支是指在Github和Gitee这些代码仓库上的分支。如图所示：</li></ul><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/image-20230528202711771.png" class="" title="image-20230528202711771"><p>那么，我们的计算机也会保存它的分支，以保证代码同步。但是这时如果有同伴在这时往服务器里上传了代码，那么就会出现远端与本地分支不同步的情况，那么就需要使用<code>git fetch</code>来保证分支同步，随后才能保证在项目的推进过程中不掉队。</p><ul><li><code>git remote add origin</code> ：“remote可以看做是一个人的电脑，假设有十个人合作，那么就有10个remote对象。为了方便大家同步，我们创建一个叫做origin的remote，大家都和这个origin同步，那么大家就可以达成一致了。”我们把remote从远端拿到本地，就可以共同操作这台“电脑”了。</li><li><code>git push</code>：这个就是代码推送，将代码从本地local推送到远端origin。<strong>要注意的是，本地在哪个分支就只能控制远端的哪个分支，比如main只能控制origin/main，branch1只能控制origin/branch1，而不能实现跨分支的控制。</strong></li></ul><p>实际上，如果你本地已经准备好了代码，而且这个Repo仓库也是刚刚创建的，那么走到这步代码应该就能上传到平台上进行存储了。</p><h1 id="git的进阶使用">Git的进阶使用</h1><p>当一个项目逐渐做大做强时，可能就需要许多人一起去分工完成项目的编码。那么Git提供了branch分支结构，允许各个项目成员拥有自己的代码分支。而当项目的编写接近尾声时，主分支master可以将其他分支合并(merge)成一个完整的大项目。</p><p>一张图可以很好地说明Git的工作流程：</p><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/9c89b5dd4cfd4f90a309bab59786edec.png" class="" title="img"><p><code>git clone</code>与<code>git pull</code>的区别：</p><ul><li><p>git clone是把整个git项目拷贝下来，包括里面的日志信息，git项目里的分支，你也可以直接切换、使用里面的分支等等。意思是原本没有项目，我把项目拷贝下来。<strong>用户开发者使用较多。</strong></p></li><li><p>git pull相当于git fetch和git merge。其意思是先从远程下载git项目里的文件，然后将文件与本地的分支进行merge。意思是原本就有项目，现在把项目的最新版本拷贝下来merge。<strong>原生开发者使用较多。</strong></p></li></ul><p><code>git fork</code>与<code>git clone</code>的区别：</p><ul><li>git clone是把代码仓库中的代码拷贝到本地计算机中。这属于远端到远端的操作。</li><li>git fork是把别人的代码仓库拷贝一份放在自己的仓库中，然后再对他进行更改。这属于远端到本地的操作。</li></ul><h1 id="ps">PS</h1><p>事实证明，和声和气，耐住性子，方能解决error。</p><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/image-20230528205505171.png" class="" title="image-20230528205505171"><img src="/2023/05/28/%E3%80%90Git%E3%80%91%E4%B8%8EGit%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E9%95%BF/image-20230528205511624.png" class="" title="image-20230528205511624">]]></content>
      
      
      
        <tags>
            
            <tag> Base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Base】求职简历以及面试教程</title>
      <link href="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="求职简历以及面试教程">求职简历以及面试教程</h1><h2 id="求职简历">求职简历</h2><p>先放ppt，后面有空整理…</p><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182847514.png" class="" title="image-20230415182847514"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182913701.png" class="" title="image-20230415182913701"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182920882.png" class="" title="image-20230415182920882"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182927471.png" class="" title="image-20230415182927471"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182940158.png" class="" title="image-20230415182940158"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415182950822.png" class="" title="image-20230415182950822"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183001480.png" class="" title="image-20230415183001480"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183009136.png" class="" title="image-20230415183009136"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183017897.png" class="" title="image-20230415183017897"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183028843.png" class="" title="image-20230415183028843"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183044957.png" class="" title="image-20230415183044957"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183056766.png" class="" title="image-20230415183056766"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183109019.png" class="" title="image-20230415183109019"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183114180.png" class="" title="image-20230415183114180"><h2 id="面试">面试</h2><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183200056.png" class="" title="image-20230415183200056"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183203335.png" class="" title="image-20230415183203335"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183207218.png" class="" title="image-20230415183207218"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183213376.png" class="" title="image-20230415183213376"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183219333.png" class="" title="image-20230415183219333"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183227504.png" class="" title="image-20230415183227504"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183233757.png" class="" title="image-20230415183233757"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183238215.png" class="" title="image-20230415183238215"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183245066.png" class="" title="image-20230415183245066"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183249988.png" class="" title="image-20230415183249988"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183257814.png" class="" title="image-20230415183257814"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183304557.png" class="" title="image-20230415183304557"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183310265.png" class="" title="image-20230415183310265"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183315697.png" class="" title="image-20230415183315697"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183320642.png" class="" title="image-20230415183320642"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183326552.png" class="" title="image-20230415183326552"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183333023.png" class="" title="image-20230415183333023"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183337844.png" class="" title="image-20230415183337844"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183342559.png" class="" title="image-20230415183342559"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183348867.png" class="" title="image-20230415183348867"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183353718.png" class="" title="image-20230415183353718"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183358108.png" class="" title="image-20230415183358108"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183402691.png" class="" title="image-20230415183402691"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183407300.png" class="" title="image-20230415183407300"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183413100.png" class="" title="image-20230415183413100"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183417591.png" class="" title="image-20230415183417591"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183422172.png" class="" title="image-20230415183422172"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183427405.png" class="" title="image-20230415183427405"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183435215.png" class="" title="image-20230415183435215"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183440475.png" class="" title="image-20230415183440475"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183444931.png" class="" title="image-20230415183444931"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183451238.png" class="" title="image-20230415183451238"><h2 id="无领导面试模拟">无领导面试模拟</h2><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183535222.png" class="" title="image-20230415183535222"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183540181.png" class="" title="image-20230415183540181"><img src="/2023/04/15/%E3%80%90Base%E3%80%91%E6%B1%82%E8%81%8C%E7%AE%80%E5%8E%86%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/image-20230415183544638.png" class="" title="image-20230415183544638">]]></content>
      
      
      
        <tags>
            
            <tag> Base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】使用Chainlink预言机获取链下数据</title>
      <link href="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在上一篇博客的基础上，本文将详细介绍Chainlink获取链下数据的方法。</p><p>本文需要在Remix上部署三个智能合约，分别是LinkToken.sol、Operator.sol和ATestnetConsumer.sol。而LinkToken合约的部署流程已在上文详细给出，这里我写一下跳转链接：<a href="https://keikei99.github.io/2023/03/17/%5BChainlink%5D%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/">【Chainlink】基于私链运行一个Chainlink预言机节点 | Keike1 (keikei99.github.io)</a>。</p><p>区块链上的用户作为数据获取方，需要从链下的数据提供方获取数据，而区块链本身不具备获取现实世界数据的能力，因此需要使用Chainlink预言机作为连接链上和链下之间的桥梁。下面我们将模拟用户获取数据的这个过程。</p><h2 id="部署operator-sol合约">部署Operator.sol合约</h2><p><a href="https://remix.ethereum.org/#url=https://docs.chain.link/samples/ChainlinkNodes/Operator.sol">Operator.sol</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.6</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.7/Operator.sol&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/deploy_operator.png" class="" title="deploy_operator"><p>部署完要记得把合约地址记录下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Operator: 0xD82f08722b8e24DA3ab608AB11E230dB0E0a5829</span><br></pre></td></tr></table></figure><p>随后调用setAuthorizedSenders方法，填自己的账户地址，注意要以数组形式传递。如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;0x0688AbDa371A869DcBb56d2E946A6898660ECDef&quot;]</span><br></pre></td></tr></table></figure><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/set_senders.png" class="" title="set_senders"><p>可以用<code>isAuthorizedSender</code>来判断是否设置成功</p><p><img src="https://docs.chain.link/images/chainlink-nodes/node-operators/operator-isauthorizedsender.jpg" alt="A screenshot showing Chainlink node whitelisted in Remix."></p><h2 id="在chainlink-operator中创建新的job">在Chainlink Operator中创建新的Job</h2><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/new_job.png" class="" title="new_job"><p>写入以下内容</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.</span></span><br><span class="line"><span class="comment"># THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"># DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="attr">schemaVersion</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;directrequest&quot;</span></span><br><span class="line"><span class="comment"># Optional External Job ID: Automatically generated if unspecified</span></span><br><span class="line"><span class="comment"># externalJobID = &quot;b1d42cd5-4a3a-4200-b1f7-25a68e48aad8&quot;</span></span><br><span class="line"><span class="attr">contractAddress</span> = <span class="string">&quot;YOUR_OPERATOR_CONTRACT_ADDRESS&quot;</span></span><br><span class="line"><span class="attr">maxTaskDuration</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line"><span class="attr">minIncomingConfirmations</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">observationSource</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    decode_log   [type=&quot;ethabidecodelog&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;$(jobRun.logData)&quot;</span></span><br><span class="line"><span class="string">                  topics=&quot;$(jobRun.logTopics)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_cbor  [type=&quot;cborparse&quot; data=&quot;$(decode_log.data)&quot;]</span></span><br><span class="line"><span class="string">    fetch        [type=&quot;http&quot; method=GET url=&quot;$(decode_cbor.get)&quot; allowUnrestrictedNetworkAccess=&quot;true&quot;]</span></span><br><span class="line"><span class="string">    parse        [type=&quot;jsonparse&quot; path=&quot;$(decode_cbor.path)&quot; data=&quot;$(fetch)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    multiply     [type=&quot;multiply&quot; input=&quot;$(parse)&quot; times=&quot;$(decode_cbor.times)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    encode_data  [type=&quot;ethabiencode&quot; abi=&quot;(bytes32 requestId, uint256 value)&quot; data=&quot;&#123; \\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;value\\&quot;: $(multiply) &#125;&quot;]</span></span><br><span class="line"><span class="string">    encode_tx    [type=&quot;ethabiencode&quot;</span></span><br><span class="line"><span class="string">                  abi=&quot;fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)&quot;</span></span><br><span class="line"><span class="string">                  data=&quot;&#123;\\&quot;requestId\\&quot;: $(decode_log.requestId), \\&quot;payment\\&quot;:   $(decode_log.payment), \\&quot;callbackAddress\\&quot;: $(decode_log.callbackAddr), \\&quot;callbackFunctionId\\&quot;: $(decode_log.callbackFunctionId), \\&quot;expiration\\&quot;: $(decode_log.cancelExpiration), \\&quot;data\\&quot;: $(encode_data)&#125;&quot;</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">    submit_tx    [type=&quot;ethtx&quot; to=&quot;YOUR_OPERATOR_CONTRACT_ADDRESS&quot; data=&quot;$(encode_tx)&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    decode_log -&gt; decode_cbor -&gt; fetch -&gt; parse -&gt; multiply -&gt; encode_data -&gt; encode_tx -&gt; submit_tx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意将以上的<strong>两个</strong><code>YOUR_OPERATOR_CONTRACT_ADDRESS</code>改为你的Operator合约地址。</p><p>随后复制系统给出的<code>externalJobId</code>备用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JobId: e22cd821-ecb1-405f-9525-d273acc8d66e</span><br></pre></td></tr></table></figure><h2 id="部署atestnetconsumer合约">部署ATestnetConsumer合约</h2><p><a href="https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol">ATestnetConsumer.sol</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.</span></span><br><span class="line"><span class="comment"> * DO NOT USE THIS CODE IN PRODUCTION.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ATestnetConsumer</span> is <span class="title class_">ChainlinkClient</span>, <span class="title class_">ConfirmedOwner</span> &#123;</span><br><span class="line">    using <span class="title class_">Chainlink</span> <span class="keyword">for</span> <span class="title class_">Chainlink</span>.<span class="property">Request</span>;</span><br><span class="line"></span><br><span class="line">    uint256 private constant <span class="variable constant_">ORACLE_PAYMENT</span> = (<span class="number">1</span> * <span class="variable constant_">LINK_DIVISIBILITY</span>) / <span class="number">10</span>; <span class="comment">// 0.1 * 10**18</span></span><br><span class="line">    uint256 public currentPrice;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">RequestEthereumPriceFulfilled</span>(</span><br><span class="line">        bytes32 indexed requestId,</span><br><span class="line">        uint256 indexed price</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Sepolia</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@dev</span> LINK address in Sepolia network: 0x779877A7B0D9E8603169DdbD7836e478b4624789</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> Check https://docs.chain.link/docs/link-token-contracts/ for LINK address for the right network</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ConfirmedOwner</span>(msg.<span class="property">sender</span>) &#123;</span><br><span class="line">        <span class="title function_">setChainlinkToken</span>(<span class="number">0x779877A7B0D9E8603169DdbD7836e478b4624789</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestEthereumPrice</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _oracle,</span></span><br><span class="line"><span class="params">        string memory _jobId</span></span><br><span class="line"><span class="params">    </span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">Chainlink</span>.<span class="property">Request</span> memory req = <span class="title function_">buildChainlinkRequest</span>(</span><br><span class="line">            <span class="title function_">stringToBytes32</span>(_jobId),</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fulfillEthereumPrice</span>.<span class="property">selector</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(</span><br><span class="line">            <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://min-api.cryptocompare.com/data/price?fsym=ETH&amp;tsyms=USD&quot;</span></span><br><span class="line">        );</span><br><span class="line">        req.<span class="title function_">add</span>(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;USD&quot;</span>);</span><br><span class="line">        req.<span class="title function_">addInt</span>(<span class="string">&quot;times&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="title function_">sendChainlinkRequestTo</span>(_oracle, req, <span class="variable constant_">ORACLE_PAYMENT</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfillEthereumPrice</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        uint256 _price</span></span><br><span class="line"><span class="params">    </span>) public <span class="title function_">recordChainlinkFulfillment</span>(<span class="params">_requestId</span>) &#123;</span><br><span class="line">        emit <span class="title class_">RequestEthereumPriceFulfilled</span>(_requestId, _price);</span><br><span class="line">        currentPrice = _price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getChainlinkToken</span>(<span class="params"></span>) public view returns (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">chainlinkTokenAddress</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawLink</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title class_">LinkTokenInterface</span> link = <span class="title class_">LinkTokenInterface</span>(<span class="title function_">chainlinkTokenAddress</span>());</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            link.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, link.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))),</span><br><span class="line">            <span class="string">&quot;Unable to transfer&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cancelRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">        bytes32 _requestId,</span></span><br><span class="line"><span class="params">        uint256 _payment,</span></span><br><span class="line"><span class="params">        bytes4 _callbackFunctionId,</span></span><br><span class="line"><span class="params">        uint256 _expiration</span></span><br><span class="line"><span class="params">    </span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">cancelChainlinkRequest</span>(</span><br><span class="line">            _requestId,</span><br><span class="line">            _payment,</span><br><span class="line">            _callbackFunctionId,</span><br><span class="line">            _expiration</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">stringToBytes32</span>(<span class="params"></span></span><br><span class="line"><span class="params">        string memory source</span></span><br><span class="line"><span class="params">    </span>) private pure returns (bytes32 result) &#123;</span><br><span class="line">        bytes memory tempEmptyStringTest = <span class="title function_">bytes</span>(source);</span><br><span class="line">        <span class="keyword">if</span> (tempEmptyStringTest.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// solhint-disable-line no-inline-assembly</span></span><br><span class="line">            result := <span class="title function_">mload</span>(<span class="title function_">add</span>(source, <span class="number">32</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里注意将第29行的setChainlinkToken的参数改为之前部署的LinkToken合约地址</strong></p><h2 id="在metamask中导入link代币">在Metamask中导入LINK代币</h2><p>私有链中可以有多种代币，这里我们使用Metamask去管理我们的账户余额以方便我们在Remix部署合约。</p><p>打开Metamask，点击Assets，点击Import tokens</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/import_tokens.png" class="" title="import_tokens"><p>然后填入你的LinkToken合约地址和它的代币符号LINK就行。</p><h2 id="利用linktoken合约向atestnetconsumer合约转账">利用LinkToken合约向ATestnetConsumer合约转账</h2><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/transfer.png" class="" title="transfer"><p>这里我转入了1个LINK，根据实际需要转就可以了。转账以后，去原来部署的ATestnetConsumer合约中调用<code>requestEthereumPrice</code>方法。</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/request_data.png" class="" title="request_data"><p>_oracle填入Operator合约地址，_jobId填入刚刚在控制台得到的JobId。</p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p><u><strong>JobId要去掉中间的横线！！！</strong></u></p><p>最后点击currentPrice，ETH/USD的汇率就出现了。</p><img src="/2023/03/22/%E3%80%90Chainlink%E3%80%91%E4%BD%BF%E7%94%A8Chainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE/current_price.png" class="" title="current_price"><p>至此，我们实现了在区块链中获取链下的价格数据。在实际的开发中，可以将这种单一的数据拓展为特定的业务数据，以实现区块链与预言机在特定领域的应用。</p><p><a href="https://zhuanlan.zhihu.com/p/373828717">基本请求模型–单预言机工作模式 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chainlink】基于私链运行一个Chainlink预言机节点</title>
      <link href="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/"/>
      <url>/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="注意">注意</h2><p>官方文档：<a href="https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node">Running a Chainlink Node | Chainlink Documentation</a></p><ol><li>本教程和官方教程的区别在于，本教程<strong>基于自己搭建的Geth私有链</strong>而非Goerli测试网</li><li>建议先在本地创建账户，再创建json文件，然后去metamask添加import account，最后再在启动私链的命令中添加–unlock参数解锁账户，实现交易的打包。这一步，目的是为在Remix上部署LinkToken合约做准备。</li><li>在metamask上添加创建的账户是为后续在Remix上部署合约做准备</li><li>在Remix上部署LinkToken合约的目的是为后续给预言机节点转账做准备</li></ol><h2 id="用geth搭建私有链">用Geth搭建私有链</h2><p>下载Geth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ethereum</span><br></pre></td></tr></table></figure><p>随后创建如下的文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/myChain</span><br><span class="line">├── chainlink</span><br><span class="line">└── localChain</span><br><span class="line">    ├── node1</span><br></pre></td></tr></table></figure><p>输入如下命令创建账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo geth --datadir ./ account new</span><br></pre></td></tr></table></figure><p>可以通过两种方式配置创世区块：</p><ul><li>直接配置genesis.json文件</li><li>使用puppeth配置创世区块</li></ul><p>0xedd96278959aA8B27DdC14FD70ACb31f7e7beC2F</p><p>0xCDA9035668b149d18905349Fa8779073e433820C</p><p>如果要直接配置genesis.json文件，可参考如下写法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span>      <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x20000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;0x2fefd8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span>      <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000042&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mixhash&quot;</span>    <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;0x00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;18aCF602A4C1f4915709bA09A0bFd83A58656CA4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300000000000000000000&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;8c304567E5d337cB60301a998e430F056EF9F622&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;400000000000000000000&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>初始化。<strong>注意每次修改JSON文件后都必须初始化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth init --datadir data testchain.json</span><br></pre></td></tr></table></figure><p>在~/myChain/localChain/node1下启动私链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --gcmode &quot;archive&quot; --syncmode=full --networkid 4190 --http --http.addr 0.0.0.0 --http.port 6789 --http.corsdomain &quot;*&quot; --ws --port 30305 --allow-insecure-unlock --unlock edd96278959aA8B27DdC14FD70ACb31f7e7beC2F --keystore ./keystore console</span><br></pre></td></tr></table></figure><p>私链启动以后，就去Metamask添加网络。</p><p>Metamask具体可以看这篇：<a href="https://blog.csdn.net/llslinliansheng/article/details/123596009">https://blog.csdn.net/llslinliansheng/article/details/123596009</a></p><p>私链开启挖矿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">miner.setEtherbase(&quot;edd96278959aa8b27ddc14fd70acb31f7e7bec2f&quot;)</span><br><span class="line">miner.start()</span><br></pre></td></tr></table></figure><h2 id="搭建chainlink预言机">搭建Chainlink预言机</h2><p>由于LinkToken.sol的Solidity代码需要在GitHub拉取，可以通过在主页按T键搜索LinkToken.sol文件，找到文件所在目录，并拉取其V0.4的所有文件。同时要修改import部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/ERC677Token.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StandardToken</span> <span class="keyword">as</span> linkStandardToken &#125; <span class="keyword">from</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/contracts/src/v0.4/vendor/StandardToken.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LinkToken</span> is linkStandardToken, <span class="title class_">ERC677Token</span> &#123;</span><br><span class="line"></span><br><span class="line">  uint public constant totalSupply = <span class="number">10</span>**<span class="number">27</span>;</span><br><span class="line">  string public constant name = <span class="string">&quot;ChainLink Token&quot;</span>;</span><br><span class="line">  uint8 public constant decimals = <span class="number">18</span>;</span><br><span class="line">  string public constant symbol = <span class="string">&quot;LINK&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">LinkToken</span>(<span class="params"></span>)</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = totalSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address with additional data if the recipient is a contract.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _data The extra data to be passed to the receiving contract.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferAndCall</span>(<span class="params">address _to, uint _value, bytes _data</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferAndCall</span>(_to, _value, _data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@dev</span> transfer token to a specified address.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> _value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transfer</span>(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _spender The address which will spend the funds.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value The amount of tokens to be spent.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address _spender, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_spender)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">approve</span>(_spender,  _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@dev</span> Transfer tokens from one address to another</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _from address The address which you want to send tokens from</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _to address The address which you want to transfer to</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> _value uint256 the amount of tokens to be transferred</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address _from, address _to, uint256 _value</span>)</span><br><span class="line">    public</span><br><span class="line">    <span class="title function_">validRecipient</span>(_to)</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transferFrom</span>(_from, _to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MODIFIERS</span></span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">validRecipient</span>(<span class="params">address _recipient</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(_recipient != <span class="title function_">address</span>(<span class="number">0</span>) &amp;&amp; _recipient != <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后使用Remix部署合约，然而私链终端需要对交易进行打包，解锁账户，开始挖矿。</p><img src="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/geth_miner.png" class="" title="geth_miner"><p>安装PostgreSQL和docker，这里不细说。PostgreSQL的安装过程具体可以看这篇文章：<a href="https://linux.cn/article-11480-1.html">技术|如何在 Ubuntu 上安装和配置 PostgreSQL (linux.cn)</a>。</p><p>我使用的PostgreSQL版本和docker版本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">keikei@ubuntu:~$ psql --version</span><br><span class="line">psql (PostgreSQL) 12.14 (Ubuntu 12.14-0ubuntu0.20.04.1)</span><br><span class="line">keikei@ubuntu:~$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           23.0.1</span><br><span class="line"> API version:       1.42</span><br><span class="line"> Go version:        go1.19.5</span><br><span class="line"> Git commit:        a5ee5b1</span><br><span class="line"> Built:             Thu Feb  9 19:46:56 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line">permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>随后在~/myChain/chainlink/.chainlink下创建<code>.env</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ROOT=/chainlink</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line">ETH_CHAIN_ID=4190</span><br><span class="line">CHAINLINK_TLS_PORT=0</span><br><span class="line">LINK_CONTRACT_ADDRESS=0x2C8ed9723635a66597Ee5f94E626453A3528fE26</span><br><span class="line">SECURE_COOKIES=false</span><br><span class="line">ALLOW_ORIGINS=*</span><br><span class="line">ETH_URL=ws://127.0.0.1:8546</span><br><span class="line">DATABASE_URL=postgresql://postgres:Likeqi5201314000@localhost:5432/chainlink?sslmode=disable</span><br><span class="line">DATABASE_TIMEOUT=0</span><br></pre></td></tr></table></figure><p>随后启动预言机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net host -u=root  -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink:1.11.0 local n</span><br></pre></td></tr></table></figure><p>在本地浏览器输入127.0.0.1:6688，打开Chainlink Operator</p><img src="/2023/03/17/%E3%80%90Chainlink%E3%80%91%E5%9F%BA%E4%BA%8E%E7%A7%81%E9%93%BE%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAChainlink%E9%A2%84%E8%A8%80%E6%9C%BA%E8%8A%82%E7%82%B9/chainlink_operator.png" class="" title="chainlink_operator"><p>至此，Chainlink分布式预言机节点已经搭建完毕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chainlink </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
